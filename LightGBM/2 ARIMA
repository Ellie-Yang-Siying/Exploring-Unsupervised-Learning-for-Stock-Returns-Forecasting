{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["n_GbafheUirE"],"authorship_tag":"ABX9TyPOsjqMtVu7jUgpyJUAc3Hw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":48,"metadata":{"id":"P2HO3t5YLpjx","executionInfo":{"status":"ok","timestamp":1733552422117,"user_tz":300,"elapsed":220,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from statsmodels.tsa.arima.model import ARIMA\n","import pmdarima as pm\n","from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","from statsmodels.tsa.api import VAR\n","from statsmodels.tsa.stattools import adfuller"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SVV1PxR2MAiQ","executionInfo":{"status":"ok","timestamp":1733542584307,"user_tz":300,"elapsed":17689,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"9fd0bf61-30e7-4b62-b2a0-51901dffe196"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["# Data preparation"],"metadata":{"id":"sNMxDmvHNmkp"}},{"cell_type":"code","source":["data_dir_path = '/content/drive/MyDrive/Edge Final Project/Yahoo Dataset/yahoo_raw_data/df_adj_close.csv'\n","df_orig = pd.read_csv(data_dir_path)\n","df_orig['Date'] = pd.to_datetime(df_orig['Date'])\n","start_date = '2017-01-01'\n","end_date = '2022-12-31'\n","df_orig = df_orig[(df_orig['Date'] >= start_date) & (df_orig['Date'] <= end_date)]\n","df_orig"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"Ub9OkZgXMBex","executionInfo":{"status":"ok","timestamp":1733543005226,"user_tz":300,"elapsed":1668,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"12b5ae9a-e14d-4b12-98c0-1b28cddbaef0"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          Date         3IN         FOUR        ABDN  \\\n","1768 2017-01-03 00:00:00+00:00  193.466919  1506.214478  236.336594   \n","1769 2017-01-04 00:00:00+00:00  193.052505  1558.152954  236.024658   \n","1770 2017-01-05 00:00:00+00:00  193.778107  1511.240845  226.603668   \n","1771 2017-01-06 00:00:00+00:00  193.674942  1528.833008  227.102783   \n","1772 2017-01-09 00:00:00+00:00  193.466919  1548.100342  224.919144   \n","...                        ...         ...          ...         ...   \n","3278 2022-12-22 00:00:00+00:00  317.167389  4023.311523  155.835922   \n","3279 2022-12-23 00:00:00+00:00  319.128265  4143.548828  156.296875   \n","3280 2022-12-28 00:00:00+00:00  323.049957  3967.817871  157.176819   \n","3281 2022-12-29 00:00:00+00:00  325.991211  3977.066895  158.936737   \n","3282 2022-12-30 00:00:00+00:00  327.461823  3953.944824  158.601486   \n","\n","            ALFA         ALW         ATT         ALPH          AO        APAX  \\\n","1768         NaN  633.503723   83.025002          NaN  181.600006  134.559006   \n","1769         NaN  638.468445   83.150002          NaN  178.100006  134.798447   \n","1770         NaN  641.447449   83.000000          NaN  180.399994  135.516708   \n","1771         NaN  644.426208   83.500000          NaN  180.000000  135.516708   \n","1772         NaN  652.866333   84.199997          NaN  181.500000  135.995590   \n","...          ...         ...         ...          ...         ...         ...   \n","3278  150.875656  930.475708  206.500000  1850.570923   52.000000  182.220901   \n","3279  150.875656  931.469849  206.500000  1860.414307   52.400002  177.992142   \n","3280  149.955704  932.463928  205.500000  1791.510132   52.150002  177.031082   \n","3281  152.715607  942.404907  212.500000  1771.823242   52.700001  181.067596   \n","3282  152.715607  942.404907  210.000000  1821.040283   52.000000  181.067596   \n","\n","      ...   WOSG         JDW         SMWH    WIZZ          WG         WKP  \\\n","1768  ...    NaN  840.359009  1349.641479  1799.0  654.553162  571.695435   \n","1769  ...    NaN  836.061646  1346.138062  1840.0  653.811462  580.628235   \n","1770  ...    NaN  846.088684  1386.425781  1861.0  657.519958  588.444458   \n","1771  ...    NaN  850.385925  1387.301758  1854.0  659.745117  594.027405   \n","1772  ...    NaN  850.863403  1397.811401  1843.0  663.453735  577.650635   \n","...   ...    ...         ...          ...     ...         ...         ...   \n","3278  ...  819.0  422.292847  1443.464600  2040.0  135.399994  392.774750   \n","3279  ...  812.5  427.207794  1424.668457  2084.0  135.000000  393.316193   \n","3280  ...  826.5  428.977173  1437.681274  1999.5  134.699997  400.897339   \n","3281  ...  835.5  434.088745  1426.596191  1967.5  138.750000  402.882874   \n","3282  ...  820.5  436.644531  1430.933838  1904.5  135.149994  401.258392   \n","\n","             WWH         XPS         ZIG          ASL  \n","1768  211.866669         NaN  326.510529  1097.930786  \n","1769  214.265167         NaN  333.471741  1093.974487  \n","1770  216.663651         NaN  342.090271  1096.942139  \n","1771  218.762329         NaN  340.432831  1097.930786  \n","1772  223.359421         NaN  348.719879  1094.963379  \n","...          ...         ...         ...          ...  \n","3278  324.449280  128.540436  370.457520  1287.995850  \n","3279  325.949036  128.769989  372.238556  1301.866577  \n","3280  322.949463  127.622292  371.793304  1299.885132  \n","3281  325.449127  130.376740  372.683868  1311.774292  \n","3282  322.449585  127.622292  366.895447  1309.792847  \n","\n","[1515 rows x 251 columns]"],"text/html":["\n","  <div id=\"df-9e40a21e-a3e1-42bd-8334-4105f862561c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>3IN</th>\n","      <th>FOUR</th>\n","      <th>ABDN</th>\n","      <th>ALFA</th>\n","      <th>ALW</th>\n","      <th>ATT</th>\n","      <th>ALPH</th>\n","      <th>AO</th>\n","      <th>APAX</th>\n","      <th>...</th>\n","      <th>WOSG</th>\n","      <th>JDW</th>\n","      <th>SMWH</th>\n","      <th>WIZZ</th>\n","      <th>WG</th>\n","      <th>WKP</th>\n","      <th>WWH</th>\n","      <th>XPS</th>\n","      <th>ZIG</th>\n","      <th>ASL</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1768</th>\n","      <td>2017-01-03 00:00:00+00:00</td>\n","      <td>193.466919</td>\n","      <td>1506.214478</td>\n","      <td>236.336594</td>\n","      <td>NaN</td>\n","      <td>633.503723</td>\n","      <td>83.025002</td>\n","      <td>NaN</td>\n","      <td>181.600006</td>\n","      <td>134.559006</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>840.359009</td>\n","      <td>1349.641479</td>\n","      <td>1799.0</td>\n","      <td>654.553162</td>\n","      <td>571.695435</td>\n","      <td>211.866669</td>\n","      <td>NaN</td>\n","      <td>326.510529</td>\n","      <td>1097.930786</td>\n","    </tr>\n","    <tr>\n","      <th>1769</th>\n","      <td>2017-01-04 00:00:00+00:00</td>\n","      <td>193.052505</td>\n","      <td>1558.152954</td>\n","      <td>236.024658</td>\n","      <td>NaN</td>\n","      <td>638.468445</td>\n","      <td>83.150002</td>\n","      <td>NaN</td>\n","      <td>178.100006</td>\n","      <td>134.798447</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>836.061646</td>\n","      <td>1346.138062</td>\n","      <td>1840.0</td>\n","      <td>653.811462</td>\n","      <td>580.628235</td>\n","      <td>214.265167</td>\n","      <td>NaN</td>\n","      <td>333.471741</td>\n","      <td>1093.974487</td>\n","    </tr>\n","    <tr>\n","      <th>1770</th>\n","      <td>2017-01-05 00:00:00+00:00</td>\n","      <td>193.778107</td>\n","      <td>1511.240845</td>\n","      <td>226.603668</td>\n","      <td>NaN</td>\n","      <td>641.447449</td>\n","      <td>83.000000</td>\n","      <td>NaN</td>\n","      <td>180.399994</td>\n","      <td>135.516708</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>846.088684</td>\n","      <td>1386.425781</td>\n","      <td>1861.0</td>\n","      <td>657.519958</td>\n","      <td>588.444458</td>\n","      <td>216.663651</td>\n","      <td>NaN</td>\n","      <td>342.090271</td>\n","      <td>1096.942139</td>\n","    </tr>\n","    <tr>\n","      <th>1771</th>\n","      <td>2017-01-06 00:00:00+00:00</td>\n","      <td>193.674942</td>\n","      <td>1528.833008</td>\n","      <td>227.102783</td>\n","      <td>NaN</td>\n","      <td>644.426208</td>\n","      <td>83.500000</td>\n","      <td>NaN</td>\n","      <td>180.000000</td>\n","      <td>135.516708</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>850.385925</td>\n","      <td>1387.301758</td>\n","      <td>1854.0</td>\n","      <td>659.745117</td>\n","      <td>594.027405</td>\n","      <td>218.762329</td>\n","      <td>NaN</td>\n","      <td>340.432831</td>\n","      <td>1097.930786</td>\n","    </tr>\n","    <tr>\n","      <th>1772</th>\n","      <td>2017-01-09 00:00:00+00:00</td>\n","      <td>193.466919</td>\n","      <td>1548.100342</td>\n","      <td>224.919144</td>\n","      <td>NaN</td>\n","      <td>652.866333</td>\n","      <td>84.199997</td>\n","      <td>NaN</td>\n","      <td>181.500000</td>\n","      <td>135.995590</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>850.863403</td>\n","      <td>1397.811401</td>\n","      <td>1843.0</td>\n","      <td>663.453735</td>\n","      <td>577.650635</td>\n","      <td>223.359421</td>\n","      <td>NaN</td>\n","      <td>348.719879</td>\n","      <td>1094.963379</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3278</th>\n","      <td>2022-12-22 00:00:00+00:00</td>\n","      <td>317.167389</td>\n","      <td>4023.311523</td>\n","      <td>155.835922</td>\n","      <td>150.875656</td>\n","      <td>930.475708</td>\n","      <td>206.500000</td>\n","      <td>1850.570923</td>\n","      <td>52.000000</td>\n","      <td>182.220901</td>\n","      <td>...</td>\n","      <td>819.0</td>\n","      <td>422.292847</td>\n","      <td>1443.464600</td>\n","      <td>2040.0</td>\n","      <td>135.399994</td>\n","      <td>392.774750</td>\n","      <td>324.449280</td>\n","      <td>128.540436</td>\n","      <td>370.457520</td>\n","      <td>1287.995850</td>\n","    </tr>\n","    <tr>\n","      <th>3279</th>\n","      <td>2022-12-23 00:00:00+00:00</td>\n","      <td>319.128265</td>\n","      <td>4143.548828</td>\n","      <td>156.296875</td>\n","      <td>150.875656</td>\n","      <td>931.469849</td>\n","      <td>206.500000</td>\n","      <td>1860.414307</td>\n","      <td>52.400002</td>\n","      <td>177.992142</td>\n","      <td>...</td>\n","      <td>812.5</td>\n","      <td>427.207794</td>\n","      <td>1424.668457</td>\n","      <td>2084.0</td>\n","      <td>135.000000</td>\n","      <td>393.316193</td>\n","      <td>325.949036</td>\n","      <td>128.769989</td>\n","      <td>372.238556</td>\n","      <td>1301.866577</td>\n","    </tr>\n","    <tr>\n","      <th>3280</th>\n","      <td>2022-12-28 00:00:00+00:00</td>\n","      <td>323.049957</td>\n","      <td>3967.817871</td>\n","      <td>157.176819</td>\n","      <td>149.955704</td>\n","      <td>932.463928</td>\n","      <td>205.500000</td>\n","      <td>1791.510132</td>\n","      <td>52.150002</td>\n","      <td>177.031082</td>\n","      <td>...</td>\n","      <td>826.5</td>\n","      <td>428.977173</td>\n","      <td>1437.681274</td>\n","      <td>1999.5</td>\n","      <td>134.699997</td>\n","      <td>400.897339</td>\n","      <td>322.949463</td>\n","      <td>127.622292</td>\n","      <td>371.793304</td>\n","      <td>1299.885132</td>\n","    </tr>\n","    <tr>\n","      <th>3281</th>\n","      <td>2022-12-29 00:00:00+00:00</td>\n","      <td>325.991211</td>\n","      <td>3977.066895</td>\n","      <td>158.936737</td>\n","      <td>152.715607</td>\n","      <td>942.404907</td>\n","      <td>212.500000</td>\n","      <td>1771.823242</td>\n","      <td>52.700001</td>\n","      <td>181.067596</td>\n","      <td>...</td>\n","      <td>835.5</td>\n","      <td>434.088745</td>\n","      <td>1426.596191</td>\n","      <td>1967.5</td>\n","      <td>138.750000</td>\n","      <td>402.882874</td>\n","      <td>325.449127</td>\n","      <td>130.376740</td>\n","      <td>372.683868</td>\n","      <td>1311.774292</td>\n","    </tr>\n","    <tr>\n","      <th>3282</th>\n","      <td>2022-12-30 00:00:00+00:00</td>\n","      <td>327.461823</td>\n","      <td>3953.944824</td>\n","      <td>158.601486</td>\n","      <td>152.715607</td>\n","      <td>942.404907</td>\n","      <td>210.000000</td>\n","      <td>1821.040283</td>\n","      <td>52.000000</td>\n","      <td>181.067596</td>\n","      <td>...</td>\n","      <td>820.5</td>\n","      <td>436.644531</td>\n","      <td>1430.933838</td>\n","      <td>1904.5</td>\n","      <td>135.149994</td>\n","      <td>401.258392</td>\n","      <td>322.449585</td>\n","      <td>127.622292</td>\n","      <td>366.895447</td>\n","      <td>1309.792847</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1515 rows × 251 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e40a21e-a3e1-42bd-8334-4105f862561c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9e40a21e-a3e1-42bd-8334-4105f862561c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9e40a21e-a3e1-42bd-8334-4105f862561c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d8f1dec0-4969-4675-a146-3d0d16ba578a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d8f1dec0-4969-4675-a146-3d0d16ba578a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d8f1dec0-4969-4675-a146-3d0d16ba578a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_ec45f6e8-5c3a-4aee-b968-42a5029a0090\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_orig')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ec45f6e8-5c3a-4aee-b968-42a5029a0090 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_orig');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_orig"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["cluster_data_dir_path = '/content/drive/MyDrive/Edge Final Project/Clustering results/'\n","cluster_data = pd.read_csv(cluster_data_dir_path + 'stock_8_cluster_df.csv')\n","cluster_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"nQ_OzxEoNTSr","executionInfo":{"status":"ok","timestamp":1733542957668,"user_tz":300,"elapsed":1456,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"df6b0adf-898e-48f8-f8af-1550f0d79dbb"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Ticker  Cluster\n","0      3IN        2\n","1     FOUR        6\n","2     ABDN        5\n","3      ALW        5\n","4      ATT        5\n","..     ...      ...\n","164     WG        6\n","165    WKP        5\n","166    WWH        7\n","167    ZIG        5\n","168    ASL        1\n","\n","[169 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-e442d3b6-4945-429f-ae33-4ecfc927fced\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Ticker</th>\n","      <th>Cluster</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3IN</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>FOUR</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ABDN</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ALW</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ATT</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>164</th>\n","      <td>WG</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>165</th>\n","      <td>WKP</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>166</th>\n","      <td>WWH</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>167</th>\n","      <td>ZIG</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>168</th>\n","      <td>ASL</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>169 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e442d3b6-4945-429f-ae33-4ecfc927fced')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e442d3b6-4945-429f-ae33-4ecfc927fced button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e442d3b6-4945-429f-ae33-4ecfc927fced');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f93ab543-aced-4969-b5f4-bd34e0db4510\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f93ab543-aced-4969-b5f4-bd34e0db4510')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f93ab543-aced-4969-b5f4-bd34e0db4510 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a559f0c7-82c8-4852-9b1e-d0d1db74009f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cluster_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a559f0c7-82c8-4852-9b1e-d0d1db74009f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('cluster_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cluster_data","summary":"{\n  \"name\": \"cluster_data\",\n  \"rows\": 169,\n  \"fields\": [\n    {\n      \"column\": \"Ticker\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 169,\n        \"samples\": [\n          \"RICA\",\n          \"CGT\",\n          \"PAGE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cluster\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6,\n          7,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["companies_to_keep = cluster_data['Ticker'].tolist()\n","# Columns to remove, these are the ones with missing value but in cluster_data\n","companies_to_remove = ['CGT', 'BAB', 'GAW', 'JMAT', 'SPT', 'BWY', 'CWK']\n","# Final list of companies to retain in df_orig\n","final_columns_to_keep = [col for col in companies_to_keep if col not in companies_to_remove]\n","# Filtering df_orig to keep only these columns\n","filtered_df_orig = df_orig[['Date'] + final_columns_to_keep]\n","filtered_df_orig"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"JDXvGTU9OUBL","executionInfo":{"status":"ok","timestamp":1733543978984,"user_tz":300,"elapsed":224,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"108439f2-3e2b-4b2d-9a41-0afeb654fc12"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          Date         3IN         FOUR        ABDN  \\\n","1768 2017-01-03 00:00:00+00:00  193.466919  1506.214478  236.336594   \n","1769 2017-01-04 00:00:00+00:00  193.052505  1558.152954  236.024658   \n","1770 2017-01-05 00:00:00+00:00  193.778107  1511.240845  226.603668   \n","1771 2017-01-06 00:00:00+00:00  193.674942  1528.833008  227.102783   \n","1772 2017-01-09 00:00:00+00:00  193.466919  1548.100342  224.919144   \n","...                        ...         ...          ...         ...   \n","3278 2022-12-22 00:00:00+00:00  317.167389  4023.311523  155.835922   \n","3279 2022-12-23 00:00:00+00:00  319.128265  4143.548828  156.296875   \n","3280 2022-12-28 00:00:00+00:00  323.049957  3967.817871  157.176819   \n","3281 2022-12-29 00:00:00+00:00  325.991211  3977.066895  158.936737   \n","3282 2022-12-30 00:00:00+00:00  327.461823  3953.944824  158.601486   \n","\n","             ALW         ATT        ASHM         DGN        AGR         AGT  \\\n","1768  633.503723   83.025002  178.105286  303.100891  38.422039  128.612762   \n","1769  638.468445   83.150002  185.775803  305.973267  38.899757  129.112045   \n","1770  641.447449   83.000000  189.517502  306.972443  38.592655  128.812454   \n","1771  644.426208   83.500000  186.648849  308.346130  38.899757  129.012161   \n","1772  652.866333   84.199997  178.042953  313.216766  38.695023  130.210464   \n","...          ...         ...         ...         ...        ...         ...   \n","3278  930.475708  206.500000  194.741806  419.917267  46.838127  186.535660   \n","3279  931.469849  206.500000  192.732422  421.916870  47.409866  187.335403   \n","3280  932.463928  205.500000  195.746490  421.916870  47.365883  187.335403   \n","3281  942.404907  212.500000  200.602478  425.916077  48.069557  188.335037   \n","3282  942.404907  210.000000  200.435013  411.918854  47.981598  188.934845   \n","\n","      ...        VSVS          VCT         VOF         JDW         SMWH  \\\n","1768  ...  292.347565  1498.385254  272.698456  840.359009  1349.641479   \n","1769  ...  293.078003  1508.462280  272.199463  836.061646  1346.138062   \n","1770  ...  292.931915  1513.888550  271.949951  846.088684  1386.425781   \n","1771  ...  293.516357  1504.586670  272.448975  850.385925  1387.301758   \n","1772  ...  292.201416  1506.136963  272.947937  850.863403  1397.811401   \n","...   ...         ...          ...         ...         ...          ...   \n","3278  ...  355.944672  1454.924927  442.753387  422.292847  1443.464600   \n","3279  ...  360.975677  1485.389526  442.753387  427.207794  1424.668457   \n","3280  ...  364.209900  1480.773804  448.750061  428.977173  1437.681274   \n","3281  ...  363.131866  1476.157959  448.250336  434.088745  1426.596191   \n","3282  ...  363.131866  1474.311646  446.251495  436.644531  1430.933838   \n","\n","              WG         WKP         WWH         ZIG          ASL  \n","1768  654.553162  571.695435  211.866669  326.510529  1097.930786  \n","1769  653.811462  580.628235  214.265167  333.471741  1093.974487  \n","1770  657.519958  588.444458  216.663651  342.090271  1096.942139  \n","1771  659.745117  594.027405  218.762329  340.432831  1097.930786  \n","1772  663.453735  577.650635  223.359421  348.719879  1094.963379  \n","...          ...         ...         ...         ...          ...  \n","3278  135.399994  392.774750  324.449280  370.457520  1287.995850  \n","3279  135.000000  393.316193  325.949036  372.238556  1301.866577  \n","3280  134.699997  400.897339  322.949463  371.793304  1299.885132  \n","3281  138.750000  402.882874  325.449127  372.683868  1311.774292  \n","3282  135.149994  401.258392  322.449585  366.895447  1309.792847  \n","\n","[1515 rows x 163 columns]"],"text/html":["\n","  <div id=\"df-f1c0b3ec-7db4-441a-b6e4-0bb307455c3e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>3IN</th>\n","      <th>FOUR</th>\n","      <th>ABDN</th>\n","      <th>ALW</th>\n","      <th>ATT</th>\n","      <th>ASHM</th>\n","      <th>DGN</th>\n","      <th>AGR</th>\n","      <th>AGT</th>\n","      <th>...</th>\n","      <th>VSVS</th>\n","      <th>VCT</th>\n","      <th>VOF</th>\n","      <th>JDW</th>\n","      <th>SMWH</th>\n","      <th>WG</th>\n","      <th>WKP</th>\n","      <th>WWH</th>\n","      <th>ZIG</th>\n","      <th>ASL</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1768</th>\n","      <td>2017-01-03 00:00:00+00:00</td>\n","      <td>193.466919</td>\n","      <td>1506.214478</td>\n","      <td>236.336594</td>\n","      <td>633.503723</td>\n","      <td>83.025002</td>\n","      <td>178.105286</td>\n","      <td>303.100891</td>\n","      <td>38.422039</td>\n","      <td>128.612762</td>\n","      <td>...</td>\n","      <td>292.347565</td>\n","      <td>1498.385254</td>\n","      <td>272.698456</td>\n","      <td>840.359009</td>\n","      <td>1349.641479</td>\n","      <td>654.553162</td>\n","      <td>571.695435</td>\n","      <td>211.866669</td>\n","      <td>326.510529</td>\n","      <td>1097.930786</td>\n","    </tr>\n","    <tr>\n","      <th>1769</th>\n","      <td>2017-01-04 00:00:00+00:00</td>\n","      <td>193.052505</td>\n","      <td>1558.152954</td>\n","      <td>236.024658</td>\n","      <td>638.468445</td>\n","      <td>83.150002</td>\n","      <td>185.775803</td>\n","      <td>305.973267</td>\n","      <td>38.899757</td>\n","      <td>129.112045</td>\n","      <td>...</td>\n","      <td>293.078003</td>\n","      <td>1508.462280</td>\n","      <td>272.199463</td>\n","      <td>836.061646</td>\n","      <td>1346.138062</td>\n","      <td>653.811462</td>\n","      <td>580.628235</td>\n","      <td>214.265167</td>\n","      <td>333.471741</td>\n","      <td>1093.974487</td>\n","    </tr>\n","    <tr>\n","      <th>1770</th>\n","      <td>2017-01-05 00:00:00+00:00</td>\n","      <td>193.778107</td>\n","      <td>1511.240845</td>\n","      <td>226.603668</td>\n","      <td>641.447449</td>\n","      <td>83.000000</td>\n","      <td>189.517502</td>\n","      <td>306.972443</td>\n","      <td>38.592655</td>\n","      <td>128.812454</td>\n","      <td>...</td>\n","      <td>292.931915</td>\n","      <td>1513.888550</td>\n","      <td>271.949951</td>\n","      <td>846.088684</td>\n","      <td>1386.425781</td>\n","      <td>657.519958</td>\n","      <td>588.444458</td>\n","      <td>216.663651</td>\n","      <td>342.090271</td>\n","      <td>1096.942139</td>\n","    </tr>\n","    <tr>\n","      <th>1771</th>\n","      <td>2017-01-06 00:00:00+00:00</td>\n","      <td>193.674942</td>\n","      <td>1528.833008</td>\n","      <td>227.102783</td>\n","      <td>644.426208</td>\n","      <td>83.500000</td>\n","      <td>186.648849</td>\n","      <td>308.346130</td>\n","      <td>38.899757</td>\n","      <td>129.012161</td>\n","      <td>...</td>\n","      <td>293.516357</td>\n","      <td>1504.586670</td>\n","      <td>272.448975</td>\n","      <td>850.385925</td>\n","      <td>1387.301758</td>\n","      <td>659.745117</td>\n","      <td>594.027405</td>\n","      <td>218.762329</td>\n","      <td>340.432831</td>\n","      <td>1097.930786</td>\n","    </tr>\n","    <tr>\n","      <th>1772</th>\n","      <td>2017-01-09 00:00:00+00:00</td>\n","      <td>193.466919</td>\n","      <td>1548.100342</td>\n","      <td>224.919144</td>\n","      <td>652.866333</td>\n","      <td>84.199997</td>\n","      <td>178.042953</td>\n","      <td>313.216766</td>\n","      <td>38.695023</td>\n","      <td>130.210464</td>\n","      <td>...</td>\n","      <td>292.201416</td>\n","      <td>1506.136963</td>\n","      <td>272.947937</td>\n","      <td>850.863403</td>\n","      <td>1397.811401</td>\n","      <td>663.453735</td>\n","      <td>577.650635</td>\n","      <td>223.359421</td>\n","      <td>348.719879</td>\n","      <td>1094.963379</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3278</th>\n","      <td>2022-12-22 00:00:00+00:00</td>\n","      <td>317.167389</td>\n","      <td>4023.311523</td>\n","      <td>155.835922</td>\n","      <td>930.475708</td>\n","      <td>206.500000</td>\n","      <td>194.741806</td>\n","      <td>419.917267</td>\n","      <td>46.838127</td>\n","      <td>186.535660</td>\n","      <td>...</td>\n","      <td>355.944672</td>\n","      <td>1454.924927</td>\n","      <td>442.753387</td>\n","      <td>422.292847</td>\n","      <td>1443.464600</td>\n","      <td>135.399994</td>\n","      <td>392.774750</td>\n","      <td>324.449280</td>\n","      <td>370.457520</td>\n","      <td>1287.995850</td>\n","    </tr>\n","    <tr>\n","      <th>3279</th>\n","      <td>2022-12-23 00:00:00+00:00</td>\n","      <td>319.128265</td>\n","      <td>4143.548828</td>\n","      <td>156.296875</td>\n","      <td>931.469849</td>\n","      <td>206.500000</td>\n","      <td>192.732422</td>\n","      <td>421.916870</td>\n","      <td>47.409866</td>\n","      <td>187.335403</td>\n","      <td>...</td>\n","      <td>360.975677</td>\n","      <td>1485.389526</td>\n","      <td>442.753387</td>\n","      <td>427.207794</td>\n","      <td>1424.668457</td>\n","      <td>135.000000</td>\n","      <td>393.316193</td>\n","      <td>325.949036</td>\n","      <td>372.238556</td>\n","      <td>1301.866577</td>\n","    </tr>\n","    <tr>\n","      <th>3280</th>\n","      <td>2022-12-28 00:00:00+00:00</td>\n","      <td>323.049957</td>\n","      <td>3967.817871</td>\n","      <td>157.176819</td>\n","      <td>932.463928</td>\n","      <td>205.500000</td>\n","      <td>195.746490</td>\n","      <td>421.916870</td>\n","      <td>47.365883</td>\n","      <td>187.335403</td>\n","      <td>...</td>\n","      <td>364.209900</td>\n","      <td>1480.773804</td>\n","      <td>448.750061</td>\n","      <td>428.977173</td>\n","      <td>1437.681274</td>\n","      <td>134.699997</td>\n","      <td>400.897339</td>\n","      <td>322.949463</td>\n","      <td>371.793304</td>\n","      <td>1299.885132</td>\n","    </tr>\n","    <tr>\n","      <th>3281</th>\n","      <td>2022-12-29 00:00:00+00:00</td>\n","      <td>325.991211</td>\n","      <td>3977.066895</td>\n","      <td>158.936737</td>\n","      <td>942.404907</td>\n","      <td>212.500000</td>\n","      <td>200.602478</td>\n","      <td>425.916077</td>\n","      <td>48.069557</td>\n","      <td>188.335037</td>\n","      <td>...</td>\n","      <td>363.131866</td>\n","      <td>1476.157959</td>\n","      <td>448.250336</td>\n","      <td>434.088745</td>\n","      <td>1426.596191</td>\n","      <td>138.750000</td>\n","      <td>402.882874</td>\n","      <td>325.449127</td>\n","      <td>372.683868</td>\n","      <td>1311.774292</td>\n","    </tr>\n","    <tr>\n","      <th>3282</th>\n","      <td>2022-12-30 00:00:00+00:00</td>\n","      <td>327.461823</td>\n","      <td>3953.944824</td>\n","      <td>158.601486</td>\n","      <td>942.404907</td>\n","      <td>210.000000</td>\n","      <td>200.435013</td>\n","      <td>411.918854</td>\n","      <td>47.981598</td>\n","      <td>188.934845</td>\n","      <td>...</td>\n","      <td>363.131866</td>\n","      <td>1474.311646</td>\n","      <td>446.251495</td>\n","      <td>436.644531</td>\n","      <td>1430.933838</td>\n","      <td>135.149994</td>\n","      <td>401.258392</td>\n","      <td>322.449585</td>\n","      <td>366.895447</td>\n","      <td>1309.792847</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1515 rows × 163 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1c0b3ec-7db4-441a-b6e4-0bb307455c3e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f1c0b3ec-7db4-441a-b6e4-0bb307455c3e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f1c0b3ec-7db4-441a-b6e4-0bb307455c3e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ae43087c-a144-49bd-9b47-daaac4e99029\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae43087c-a144-49bd-9b47-daaac4e99029')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ae43087c-a144-49bd-9b47-daaac4e99029 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_cf3e9487-9c8a-43cc-93b5-a2b727f34754\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('filtered_df_orig')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cf3e9487-9c8a-43cc-93b5-a2b727f34754 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('filtered_df_orig');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"filtered_df_orig"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["filtered_df_orig['Date'] = pd.to_datetime(filtered_df_orig['Date'])\n","filtered_df_orig.set_index('Date', inplace=True)\n","filtered_df_orig.sort_index(inplace=True)\n","filtered_df_orig"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":559},"id":"bzKbvlxVRMlN","executionInfo":{"status":"ok","timestamp":1733543980249,"user_tz":300,"elapsed":518,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"a19987fd-94e2-48a2-bf1d-a29c8c3c078b"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-14-58940ca5430a>:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  filtered_df_orig['Date'] = pd.to_datetime(filtered_df_orig['Date'])\n"]},{"output_type":"execute_result","data":{"text/plain":["                                  3IN         FOUR        ABDN         ALW  \\\n","Date                                                                         \n","2017-01-03 00:00:00+00:00  193.466919  1506.214478  236.336594  633.503723   \n","2017-01-04 00:00:00+00:00  193.052505  1558.152954  236.024658  638.468445   \n","2017-01-05 00:00:00+00:00  193.778107  1511.240845  226.603668  641.447449   \n","2017-01-06 00:00:00+00:00  193.674942  1528.833008  227.102783  644.426208   \n","2017-01-09 00:00:00+00:00  193.466919  1548.100342  224.919144  652.866333   \n","...                               ...          ...         ...         ...   \n","2022-12-22 00:00:00+00:00  317.167389  4023.311523  155.835922  930.475708   \n","2022-12-23 00:00:00+00:00  319.128265  4143.548828  156.296875  931.469849   \n","2022-12-28 00:00:00+00:00  323.049957  3967.817871  157.176819  932.463928   \n","2022-12-29 00:00:00+00:00  325.991211  3977.066895  158.936737  942.404907   \n","2022-12-30 00:00:00+00:00  327.461823  3953.944824  158.601486  942.404907   \n","\n","                                  ATT        ASHM         DGN        AGR  \\\n","Date                                                                       \n","2017-01-03 00:00:00+00:00   83.025002  178.105286  303.100891  38.422039   \n","2017-01-04 00:00:00+00:00   83.150002  185.775803  305.973267  38.899757   \n","2017-01-05 00:00:00+00:00   83.000000  189.517502  306.972443  38.592655   \n","2017-01-06 00:00:00+00:00   83.500000  186.648849  308.346130  38.899757   \n","2017-01-09 00:00:00+00:00   84.199997  178.042953  313.216766  38.695023   \n","...                               ...         ...         ...        ...   \n","2022-12-22 00:00:00+00:00  206.500000  194.741806  419.917267  46.838127   \n","2022-12-23 00:00:00+00:00  206.500000  192.732422  421.916870  47.409866   \n","2022-12-28 00:00:00+00:00  205.500000  195.746490  421.916870  47.365883   \n","2022-12-29 00:00:00+00:00  212.500000  200.602478  425.916077  48.069557   \n","2022-12-30 00:00:00+00:00  210.000000  200.435013  411.918854  47.981598   \n","\n","                                  AGT        BGFD  ...        VSVS  \\\n","Date                                               ...               \n","2017-01-03 00:00:00+00:00  128.612762  576.178711  ...  292.347565   \n","2017-01-04 00:00:00+00:00  129.112045  581.675720  ...  293.078003   \n","2017-01-05 00:00:00+00:00  128.812454  580.676208  ...  292.931915   \n","2017-01-06 00:00:00+00:00  129.012161  583.424683  ...  293.516357   \n","2017-01-09 00:00:00+00:00  130.210464  594.668396  ...  292.201416   \n","...                               ...         ...  ...         ...   \n","2022-12-22 00:00:00+00:00  186.535660  753.782104  ...  355.944672   \n","2022-12-23 00:00:00+00:00  187.335403  755.781494  ...  360.975677   \n","2022-12-28 00:00:00+00:00  187.335403  761.779785  ...  364.209900   \n","2022-12-29 00:00:00+00:00  188.335037  760.780090  ...  363.131866   \n","2022-12-30 00:00:00+00:00  188.934845  760.780090  ...  363.131866   \n","\n","                                   VCT         VOF         JDW         SMWH  \\\n","Date                                                                          \n","2017-01-03 00:00:00+00:00  1498.385254  272.698456  840.359009  1349.641479   \n","2017-01-04 00:00:00+00:00  1508.462280  272.199463  836.061646  1346.138062   \n","2017-01-05 00:00:00+00:00  1513.888550  271.949951  846.088684  1386.425781   \n","2017-01-06 00:00:00+00:00  1504.586670  272.448975  850.385925  1387.301758   \n","2017-01-09 00:00:00+00:00  1506.136963  272.947937  850.863403  1397.811401   \n","...                                ...         ...         ...          ...   \n","2022-12-22 00:00:00+00:00  1454.924927  442.753387  422.292847  1443.464600   \n","2022-12-23 00:00:00+00:00  1485.389526  442.753387  427.207794  1424.668457   \n","2022-12-28 00:00:00+00:00  1480.773804  448.750061  428.977173  1437.681274   \n","2022-12-29 00:00:00+00:00  1476.157959  448.250336  434.088745  1426.596191   \n","2022-12-30 00:00:00+00:00  1474.311646  446.251495  436.644531  1430.933838   \n","\n","                                   WG         WKP         WWH         ZIG  \\\n","Date                                                                        \n","2017-01-03 00:00:00+00:00  654.553162  571.695435  211.866669  326.510529   \n","2017-01-04 00:00:00+00:00  653.811462  580.628235  214.265167  333.471741   \n","2017-01-05 00:00:00+00:00  657.519958  588.444458  216.663651  342.090271   \n","2017-01-06 00:00:00+00:00  659.745117  594.027405  218.762329  340.432831   \n","2017-01-09 00:00:00+00:00  663.453735  577.650635  223.359421  348.719879   \n","...                               ...         ...         ...         ...   \n","2022-12-22 00:00:00+00:00  135.399994  392.774750  324.449280  370.457520   \n","2022-12-23 00:00:00+00:00  135.000000  393.316193  325.949036  372.238556   \n","2022-12-28 00:00:00+00:00  134.699997  400.897339  322.949463  371.793304   \n","2022-12-29 00:00:00+00:00  138.750000  402.882874  325.449127  372.683868   \n","2022-12-30 00:00:00+00:00  135.149994  401.258392  322.449585  366.895447   \n","\n","                                   ASL  \n","Date                                    \n","2017-01-03 00:00:00+00:00  1097.930786  \n","2017-01-04 00:00:00+00:00  1093.974487  \n","2017-01-05 00:00:00+00:00  1096.942139  \n","2017-01-06 00:00:00+00:00  1097.930786  \n","2017-01-09 00:00:00+00:00  1094.963379  \n","...                                ...  \n","2022-12-22 00:00:00+00:00  1287.995850  \n","2022-12-23 00:00:00+00:00  1301.866577  \n","2022-12-28 00:00:00+00:00  1299.885132  \n","2022-12-29 00:00:00+00:00  1311.774292  \n","2022-12-30 00:00:00+00:00  1309.792847  \n","\n","[1515 rows x 162 columns]"],"text/html":["\n","  <div id=\"df-15a5fb67-4352-4b65-b6d2-3f1a296c6536\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>3IN</th>\n","      <th>FOUR</th>\n","      <th>ABDN</th>\n","      <th>ALW</th>\n","      <th>ATT</th>\n","      <th>ASHM</th>\n","      <th>DGN</th>\n","      <th>AGR</th>\n","      <th>AGT</th>\n","      <th>BGFD</th>\n","      <th>...</th>\n","      <th>VSVS</th>\n","      <th>VCT</th>\n","      <th>VOF</th>\n","      <th>JDW</th>\n","      <th>SMWH</th>\n","      <th>WG</th>\n","      <th>WKP</th>\n","      <th>WWH</th>\n","      <th>ZIG</th>\n","      <th>ASL</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2017-01-03 00:00:00+00:00</th>\n","      <td>193.466919</td>\n","      <td>1506.214478</td>\n","      <td>236.336594</td>\n","      <td>633.503723</td>\n","      <td>83.025002</td>\n","      <td>178.105286</td>\n","      <td>303.100891</td>\n","      <td>38.422039</td>\n","      <td>128.612762</td>\n","      <td>576.178711</td>\n","      <td>...</td>\n","      <td>292.347565</td>\n","      <td>1498.385254</td>\n","      <td>272.698456</td>\n","      <td>840.359009</td>\n","      <td>1349.641479</td>\n","      <td>654.553162</td>\n","      <td>571.695435</td>\n","      <td>211.866669</td>\n","      <td>326.510529</td>\n","      <td>1097.930786</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-04 00:00:00+00:00</th>\n","      <td>193.052505</td>\n","      <td>1558.152954</td>\n","      <td>236.024658</td>\n","      <td>638.468445</td>\n","      <td>83.150002</td>\n","      <td>185.775803</td>\n","      <td>305.973267</td>\n","      <td>38.899757</td>\n","      <td>129.112045</td>\n","      <td>581.675720</td>\n","      <td>...</td>\n","      <td>293.078003</td>\n","      <td>1508.462280</td>\n","      <td>272.199463</td>\n","      <td>836.061646</td>\n","      <td>1346.138062</td>\n","      <td>653.811462</td>\n","      <td>580.628235</td>\n","      <td>214.265167</td>\n","      <td>333.471741</td>\n","      <td>1093.974487</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-05 00:00:00+00:00</th>\n","      <td>193.778107</td>\n","      <td>1511.240845</td>\n","      <td>226.603668</td>\n","      <td>641.447449</td>\n","      <td>83.000000</td>\n","      <td>189.517502</td>\n","      <td>306.972443</td>\n","      <td>38.592655</td>\n","      <td>128.812454</td>\n","      <td>580.676208</td>\n","      <td>...</td>\n","      <td>292.931915</td>\n","      <td>1513.888550</td>\n","      <td>271.949951</td>\n","      <td>846.088684</td>\n","      <td>1386.425781</td>\n","      <td>657.519958</td>\n","      <td>588.444458</td>\n","      <td>216.663651</td>\n","      <td>342.090271</td>\n","      <td>1096.942139</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-06 00:00:00+00:00</th>\n","      <td>193.674942</td>\n","      <td>1528.833008</td>\n","      <td>227.102783</td>\n","      <td>644.426208</td>\n","      <td>83.500000</td>\n","      <td>186.648849</td>\n","      <td>308.346130</td>\n","      <td>38.899757</td>\n","      <td>129.012161</td>\n","      <td>583.424683</td>\n","      <td>...</td>\n","      <td>293.516357</td>\n","      <td>1504.586670</td>\n","      <td>272.448975</td>\n","      <td>850.385925</td>\n","      <td>1387.301758</td>\n","      <td>659.745117</td>\n","      <td>594.027405</td>\n","      <td>218.762329</td>\n","      <td>340.432831</td>\n","      <td>1097.930786</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-09 00:00:00+00:00</th>\n","      <td>193.466919</td>\n","      <td>1548.100342</td>\n","      <td>224.919144</td>\n","      <td>652.866333</td>\n","      <td>84.199997</td>\n","      <td>178.042953</td>\n","      <td>313.216766</td>\n","      <td>38.695023</td>\n","      <td>130.210464</td>\n","      <td>594.668396</td>\n","      <td>...</td>\n","      <td>292.201416</td>\n","      <td>1506.136963</td>\n","      <td>272.947937</td>\n","      <td>850.863403</td>\n","      <td>1397.811401</td>\n","      <td>663.453735</td>\n","      <td>577.650635</td>\n","      <td>223.359421</td>\n","      <td>348.719879</td>\n","      <td>1094.963379</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-22 00:00:00+00:00</th>\n","      <td>317.167389</td>\n","      <td>4023.311523</td>\n","      <td>155.835922</td>\n","      <td>930.475708</td>\n","      <td>206.500000</td>\n","      <td>194.741806</td>\n","      <td>419.917267</td>\n","      <td>46.838127</td>\n","      <td>186.535660</td>\n","      <td>753.782104</td>\n","      <td>...</td>\n","      <td>355.944672</td>\n","      <td>1454.924927</td>\n","      <td>442.753387</td>\n","      <td>422.292847</td>\n","      <td>1443.464600</td>\n","      <td>135.399994</td>\n","      <td>392.774750</td>\n","      <td>324.449280</td>\n","      <td>370.457520</td>\n","      <td>1287.995850</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-23 00:00:00+00:00</th>\n","      <td>319.128265</td>\n","      <td>4143.548828</td>\n","      <td>156.296875</td>\n","      <td>931.469849</td>\n","      <td>206.500000</td>\n","      <td>192.732422</td>\n","      <td>421.916870</td>\n","      <td>47.409866</td>\n","      <td>187.335403</td>\n","      <td>755.781494</td>\n","      <td>...</td>\n","      <td>360.975677</td>\n","      <td>1485.389526</td>\n","      <td>442.753387</td>\n","      <td>427.207794</td>\n","      <td>1424.668457</td>\n","      <td>135.000000</td>\n","      <td>393.316193</td>\n","      <td>325.949036</td>\n","      <td>372.238556</td>\n","      <td>1301.866577</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-28 00:00:00+00:00</th>\n","      <td>323.049957</td>\n","      <td>3967.817871</td>\n","      <td>157.176819</td>\n","      <td>932.463928</td>\n","      <td>205.500000</td>\n","      <td>195.746490</td>\n","      <td>421.916870</td>\n","      <td>47.365883</td>\n","      <td>187.335403</td>\n","      <td>761.779785</td>\n","      <td>...</td>\n","      <td>364.209900</td>\n","      <td>1480.773804</td>\n","      <td>448.750061</td>\n","      <td>428.977173</td>\n","      <td>1437.681274</td>\n","      <td>134.699997</td>\n","      <td>400.897339</td>\n","      <td>322.949463</td>\n","      <td>371.793304</td>\n","      <td>1299.885132</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-29 00:00:00+00:00</th>\n","      <td>325.991211</td>\n","      <td>3977.066895</td>\n","      <td>158.936737</td>\n","      <td>942.404907</td>\n","      <td>212.500000</td>\n","      <td>200.602478</td>\n","      <td>425.916077</td>\n","      <td>48.069557</td>\n","      <td>188.335037</td>\n","      <td>760.780090</td>\n","      <td>...</td>\n","      <td>363.131866</td>\n","      <td>1476.157959</td>\n","      <td>448.250336</td>\n","      <td>434.088745</td>\n","      <td>1426.596191</td>\n","      <td>138.750000</td>\n","      <td>402.882874</td>\n","      <td>325.449127</td>\n","      <td>372.683868</td>\n","      <td>1311.774292</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-30 00:00:00+00:00</th>\n","      <td>327.461823</td>\n","      <td>3953.944824</td>\n","      <td>158.601486</td>\n","      <td>942.404907</td>\n","      <td>210.000000</td>\n","      <td>200.435013</td>\n","      <td>411.918854</td>\n","      <td>47.981598</td>\n","      <td>188.934845</td>\n","      <td>760.780090</td>\n","      <td>...</td>\n","      <td>363.131866</td>\n","      <td>1474.311646</td>\n","      <td>446.251495</td>\n","      <td>436.644531</td>\n","      <td>1430.933838</td>\n","      <td>135.149994</td>\n","      <td>401.258392</td>\n","      <td>322.449585</td>\n","      <td>366.895447</td>\n","      <td>1309.792847</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1515 rows × 162 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-15a5fb67-4352-4b65-b6d2-3f1a296c6536')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-15a5fb67-4352-4b65-b6d2-3f1a296c6536 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-15a5fb67-4352-4b65-b6d2-3f1a296c6536');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8db7cf49-55f9-4562-a352-18dcd3339351\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8db7cf49-55f9-4562-a352-18dcd3339351')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8db7cf49-55f9-4562-a352-18dcd3339351 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_72db88a0-1383-425c-a195-69e318ed3511\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('filtered_df_orig')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_72db88a0-1383-425c-a195-69e318ed3511 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('filtered_df_orig');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"filtered_df_orig"}},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["# Determine (p,d,q) for all the future ARIMA models  (2,1,3)\n","Since we will be training a lot of models, it is impossible to tune the parameter for each model.\n","\n","Thus, we will use one stock '3IN' to determine the parameter and use this set of (p,d,q) forever.\n","\n"],"metadata":{"id":"n_GbafheUirE"}},{"cell_type":"code","source":["df_3IN = filtered_df_orig[['3IN']]\n","df_3IN"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"at0HAs4CXup5","executionInfo":{"status":"ok","timestamp":1733545622860,"user_tz":300,"elapsed":550,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"eac1406b-e86e-495b-96e3-aa24c74119d4"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                  3IN\n","Date                                 \n","2017-01-03 00:00:00+00:00  193.466919\n","2017-01-04 00:00:00+00:00  193.052505\n","2017-01-05 00:00:00+00:00  193.778107\n","2017-01-06 00:00:00+00:00  193.674942\n","2017-01-09 00:00:00+00:00  193.466919\n","...                               ...\n","2022-12-22 00:00:00+00:00  317.167389\n","2022-12-23 00:00:00+00:00  319.128265\n","2022-12-28 00:00:00+00:00  323.049957\n","2022-12-29 00:00:00+00:00  325.991211\n","2022-12-30 00:00:00+00:00  327.461823\n","\n","[1515 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-0e2abdf8-8f34-4422-a8fa-27f926478332\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>3IN</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2017-01-03 00:00:00+00:00</th>\n","      <td>193.466919</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-04 00:00:00+00:00</th>\n","      <td>193.052505</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-05 00:00:00+00:00</th>\n","      <td>193.778107</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-06 00:00:00+00:00</th>\n","      <td>193.674942</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-09 00:00:00+00:00</th>\n","      <td>193.466919</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-22 00:00:00+00:00</th>\n","      <td>317.167389</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-23 00:00:00+00:00</th>\n","      <td>319.128265</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-28 00:00:00+00:00</th>\n","      <td>323.049957</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-29 00:00:00+00:00</th>\n","      <td>325.991211</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-30 00:00:00+00:00</th>\n","      <td>327.461823</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1515 rows × 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e2abdf8-8f34-4422-a8fa-27f926478332')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0e2abdf8-8f34-4422-a8fa-27f926478332 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0e2abdf8-8f34-4422-a8fa-27f926478332');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3fe10cdd-5de8-4e20-8011-eb064f405a45\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3fe10cdd-5de8-4e20-8011-eb064f405a45')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3fe10cdd-5de8-4e20-8011-eb064f405a45 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_c7c55386-a6ec-4f8d-88e4-4897179dd2fe\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_3IN')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_c7c55386-a6ec-4f8d-88e4-4897179dd2fe button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_3IN');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_3IN","summary":"{\n  \"name\": \"df_3IN\",\n  \"rows\": 1515,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-01-03 00:00:00+00:00\",\n        \"max\": \"2022-12-30 00:00:00+00:00\",\n        \"num_unique_values\": 1515,\n        \"samples\": [\n          \"2017-03-15 00:00:00+00:00\",\n          \"2017-09-01 00:00:00+00:00\",\n          \"2022-10-25 00:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"3IN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.929289836895315,\n        \"min\": 182.1836700439453,\n        \"max\": 359.2096862792969,\n        \"num_unique_values\": 855,\n        \"samples\": [\n          206.0191802978516,\n          282.0048522949219,\n          206.7337646484375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["for d in range(3):  # Test d = 0, 1, 2\n","    model = pm.auto_arima(\n","        df_3IN,\n","        start_p=1, start_q=1, # Starting values for p and q\n","        max_p=3, max_q=3, # Maximum values for p and q\n","        d=d,        # Manually set d\n","        information_criterion='aic',  # Criterion for model selection\n","        test='adf',            # Use ADF test for stationarity\n","        seasonal=False,\n","        m=1,\n","        trace=True,\n","        error_action='ignore',\n","        suppress_warnings=True,\n","        stepwise=True\n","    )\n","    print(f\"Model summary for d={d}:\\n\", model.summary())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HZMsnSZbU7JI","executionInfo":{"status":"ok","timestamp":1733546142916,"user_tz":300,"elapsed":85981,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"5405e6ad-ce9c-4584-9fc8-6ace4b9e3664"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Performing stepwise search to minimize aic\n"," ARIMA(1,0,1)(0,0,0)[0]             : AIC=8298.977, Time=0.59 sec\n"," ARIMA(0,0,0)(0,0,0)[0]             : AIC=21313.372, Time=0.04 sec\n"," ARIMA(1,0,0)(0,0,0)[0]             : AIC=inf, Time=0.23 sec\n"," ARIMA(0,0,1)(0,0,0)[0]             : AIC=inf, Time=0.27 sec\n"," ARIMA(2,0,1)(0,0,0)[0]             : AIC=8331.596, Time=2.00 sec\n"," ARIMA(1,0,2)(0,0,0)[0]             : AIC=8292.921, Time=2.43 sec\n"," ARIMA(0,0,2)(0,0,0)[0]             : AIC=inf, Time=2.05 sec\n"," ARIMA(2,0,2)(0,0,0)[0]             : AIC=8302.743, Time=0.80 sec\n"," ARIMA(1,0,3)(0,0,0)[0]             : AIC=8292.394, Time=1.08 sec\n"," ARIMA(0,0,3)(0,0,0)[0]             : AIC=inf, Time=1.60 sec\n"," ARIMA(2,0,3)(0,0,0)[0]             : AIC=8288.759, Time=2.13 sec\n"," ARIMA(3,0,3)(0,0,0)[0]             : AIC=8292.378, Time=1.81 sec\n"," ARIMA(3,0,2)(0,0,0)[0]             : AIC=8286.346, Time=1.24 sec\n"," ARIMA(3,0,1)(0,0,0)[0]             : AIC=8295.052, Time=2.10 sec\n"," ARIMA(3,0,2)(0,0,0)[0] intercept   : AIC=8283.906, Time=6.27 sec\n"," ARIMA(2,0,2)(0,0,0)[0] intercept   : AIC=8291.781, Time=1.78 sec\n"," ARIMA(3,0,1)(0,0,0)[0] intercept   : AIC=8293.877, Time=2.12 sec\n"," ARIMA(3,0,3)(0,0,0)[0] intercept   : AIC=8257.698, Time=3.46 sec\n"," ARIMA(2,0,3)(0,0,0)[0] intercept   : AIC=8276.405, Time=6.95 sec\n","\n","Best model:  ARIMA(3,0,3)(0,0,0)[0] intercept\n","Total fit time: 38.992 seconds\n","Model summary for d=0:\n","                                SARIMAX Results                                \n","==============================================================================\n","Dep. Variable:                      y   No. Observations:                 1515\n","Model:               SARIMAX(3, 0, 3)   Log Likelihood               -4120.849\n","Date:                Sat, 07 Dec 2024   AIC                           8257.698\n","Time:                        04:34:56   BIC                           8300.283\n","Sample:                             0   HQIC                          8273.554\n","                               - 1515                                         \n","Covariance Type:                  opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","intercept      0.2614      0.295      0.886      0.375      -0.317       0.840\n","ar.L1          1.9648      0.057     34.190      0.000       1.852       2.077\n","ar.L2         -1.6010      0.104    -15.410      0.000      -1.805      -1.397\n","ar.L3          0.6352      0.061     10.445      0.000       0.516       0.754\n","ma.L1         -1.1229      0.059    -18.935      0.000      -1.239      -1.007\n","ma.L2          0.8781      0.068     12.913      0.000       0.745       1.011\n","ma.L3         -0.2294      0.011    -21.262      0.000      -0.251      -0.208\n","sigma2        13.4438      0.154     87.104      0.000      13.141      13.746\n","===================================================================================\n","Ljung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):             77460.29\n","Prob(Q):                              0.99   Prob(JB):                         0.00\n","Heteroskedasticity (H):               5.59   Skew:                            -1.17\n","Prob(H) (two-sided):                  0.00   Kurtosis:                        37.95\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","Performing stepwise search to minimize aic\n"," ARIMA(1,1,1)(0,0,0)[0] intercept   : AIC=8280.583, Time=0.41 sec\n"," ARIMA(0,1,0)(0,0,0)[0] intercept   : AIC=8313.029, Time=0.06 sec\n"," ARIMA(1,1,0)(0,0,0)[0] intercept   : AIC=8280.500, Time=0.12 sec\n"," ARIMA(0,1,1)(0,0,0)[0] intercept   : AIC=8283.862, Time=0.31 sec\n"," ARIMA(0,1,0)(0,0,0)[0]             : AIC=8311.867, Time=0.06 sec\n"," ARIMA(2,1,0)(0,0,0)[0] intercept   : AIC=8279.451, Time=0.24 sec\n"," ARIMA(3,1,0)(0,0,0)[0] intercept   : AIC=8281.039, Time=0.33 sec\n"," ARIMA(2,1,1)(0,0,0)[0] intercept   : AIC=8281.400, Time=0.79 sec\n"," ARIMA(3,1,1)(0,0,0)[0] intercept   : AIC=8270.473, Time=1.52 sec\n"," ARIMA(3,1,2)(0,0,0)[0] intercept   : AIC=8250.198, Time=2.52 sec\n"," ARIMA(2,1,2)(0,0,0)[0] intercept   : AIC=8265.679, Time=1.54 sec\n"," ARIMA(3,1,3)(0,0,0)[0] intercept   : AIC=8246.197, Time=5.16 sec\n"," ARIMA(2,1,3)(0,0,0)[0] intercept   : AIC=8244.292, Time=3.09 sec\n"," ARIMA(1,1,3)(0,0,0)[0] intercept   : AIC=8262.681, Time=1.12 sec\n"," ARIMA(1,1,2)(0,0,0)[0] intercept   : AIC=8279.485, Time=0.80 sec\n"," ARIMA(2,1,3)(0,0,0)[0]             : AIC=8243.719, Time=1.08 sec\n"," ARIMA(1,1,3)(0,0,0)[0]             : AIC=8262.289, Time=0.50 sec\n"," ARIMA(2,1,2)(0,0,0)[0]             : AIC=8264.627, Time=0.58 sec\n"," ARIMA(3,1,3)(0,0,0)[0]             : AIC=8245.641, Time=1.18 sec\n"," ARIMA(1,1,2)(0,0,0)[0]             : AIC=8278.457, Time=0.28 sec\n"," ARIMA(3,1,2)(0,0,0)[0]             : AIC=8249.330, Time=1.28 sec\n","\n","Best model:  ARIMA(2,1,3)(0,0,0)[0]          \n","Total fit time: 23.012 seconds\n","Model summary for d=1:\n","                                SARIMAX Results                                \n","==============================================================================\n","Dep. Variable:                      y   No. Observations:                 1515\n","Model:               SARIMAX(2, 1, 3)   Log Likelihood               -4115.859\n","Date:                Sat, 07 Dec 2024   AIC                           8243.719\n","Time:                        04:35:19   BIC                           8275.654\n","Sample:                             0   HQIC                          8255.610\n","                               - 1515                                         \n","Covariance Type:                  opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","ar.L1          0.9681      0.057     16.962      0.000       0.856       1.080\n","ar.L2         -0.6330      0.061    -10.365      0.000      -0.753      -0.513\n","ma.L1         -1.1257      0.059    -19.086      0.000      -1.241      -1.010\n","ma.L2          0.8759      0.068     12.828      0.000       0.742       1.010\n","ma.L3         -0.2307      0.011    -21.666      0.000      -0.252      -0.210\n","sigma2        13.4515      0.154     87.295      0.000      13.150      13.754\n","===================================================================================\n","Ljung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):             77444.37\n","Prob(Q):                              0.99   Prob(JB):                         0.00\n","Heteroskedasticity (H):               5.65   Skew:                            -1.19\n","Prob(H) (two-sided):                  0.00   Kurtosis:                        37.96\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","Performing stepwise search to minimize aic\n"," ARIMA(1,2,1)(0,0,0)[0] intercept   : AIC=inf, Time=1.60 sec\n"," ARIMA(0,2,0)(0,0,0)[0] intercept   : AIC=9568.933, Time=0.07 sec\n"," ARIMA(1,2,0)(0,0,0)[0] intercept   : AIC=8912.267, Time=0.14 sec\n"," ARIMA(0,2,1)(0,0,0)[0] intercept   : AIC=inf, Time=4.10 sec\n"," ARIMA(0,2,0)(0,0,0)[0]             : AIC=9566.933, Time=0.13 sec\n"," ARIMA(2,2,0)(0,0,0)[0] intercept   : AIC=8709.926, Time=1.34 sec\n"," ARIMA(3,2,0)(0,0,0)[0] intercept   : AIC=8684.757, Time=0.70 sec\n"," ARIMA(3,2,1)(0,0,0)[0] intercept   : AIC=inf, Time=4.72 sec\n"," ARIMA(2,2,1)(0,0,0)[0] intercept   : AIC=inf, Time=2.93 sec\n"," ARIMA(3,2,0)(0,0,0)[0]             : AIC=8682.758, Time=0.41 sec\n"," ARIMA(2,2,0)(0,0,0)[0]             : AIC=8707.927, Time=0.14 sec\n"," ARIMA(3,2,1)(0,0,0)[0]             : AIC=inf, Time=5.37 sec\n"," ARIMA(2,2,1)(0,0,0)[0]             : AIC=inf, Time=2.05 sec\n","\n","Best model:  ARIMA(3,2,0)(0,0,0)[0]          \n","Total fit time: 23.721 seconds\n","Model summary for d=2:\n","                                SARIMAX Results                                \n","==============================================================================\n","Dep. Variable:                      y   No. Observations:                 1515\n","Model:               SARIMAX(3, 2, 0)   Log Likelihood               -4337.379\n","Date:                Sat, 07 Dec 2024   AIC                           8682.758\n","Time:                        04:35:42   BIC                           8704.045\n","Sample:                             0   HQIC                          8690.685\n","                               - 1515                                         \n","Covariance Type:                  opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","ar.L1         -0.8526      0.010    -85.897      0.000      -0.872      -0.833\n","ar.L2         -0.4626      0.010    -44.662      0.000      -0.483      -0.442\n","ar.L3         -0.1333      0.012    -10.833      0.000      -0.157      -0.109\n","sigma2        18.0853      0.154    117.224      0.000      17.783      18.388\n","===================================================================================\n","Ljung-Box (L1) (Q):                   1.19   Jarque-Bera (JB):            152533.27\n","Prob(Q):                              0.28   Prob(JB):                         0.00\n","Heteroskedasticity (H):               6.79   Skew:                             2.66\n","Prob(H) (two-sided):                  0.00   Kurtosis:                        51.90\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"]}]},{"cell_type":"markdown","source":["Thus we will use (p,d,q) = (2,1,3) for all the future models."],"metadata":{"id":"ia_Op3htaV6c"}},{"cell_type":"markdown","source":["# Model 1: Train with Individual data (ARIMA can only deal with univariate)"],"metadata":{"id":"M_QQlS-kPGJR"}},{"cell_type":"markdown","source":["define a model training function"],"metadata":{"id":"5qCjF8-ya1Bs"}},{"cell_type":"code","source":["def arima_forecast(stock_series, train_start, train_end, test_start, test_end, arima_order=(2, 1, 3)):\n","    train = stock_series[train_start:train_end]\n","    test = stock_series[test_start:test_end]\n","\n","    model = ARIMA(train, order=arima_order)\n","    model_fit = model.fit()\n","\n","    forecast = model_fit.forecast(steps=len(test))\n","    rmse = np.sqrt(mean_squared_error(test.values, forecast.values))\n","    mape = mean_absolute_percentage_error(test.values, forecast.values)\n","    return forecast.values, rmse, mape"],"metadata":{"id":"a6qsamdoPxPw","executionInfo":{"status":"ok","timestamp":1733548077303,"user_tz":300,"elapsed":179,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}}},"execution_count":37,"outputs":[]},{"cell_type":"markdown","source":["try the function on one stock"],"metadata":{"id":"36ZhzGT3ttyZ"}},{"cell_type":"code","source":["forecast, rmse, mape = arima_forecast(\n","        stock_series=filtered_df_orig['3IN'],\n","        train_start='2017-01-03',\n","        train_end='2021-12-31',\n","        test_start='2022-01-01',\n","        test_end='2022-12-30',\n","        arima_order=(2, 1, 3)\n","    )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UjwrsL6YgW0k","executionInfo":{"status":"ok","timestamp":1733548081019,"user_tz":300,"elapsed":2446,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"a1d096db-30e5-4377-f94c-1fec9bb8b79a"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n"]}]},{"cell_type":"code","source":["forecast"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"-tWG27HzhJC4","executionInfo":{"status":"ok","timestamp":1733548093411,"user_tz":300,"elapsed":564,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"a3c84db0-0d68-42cb-d382-7c4cc6bcacc1"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([347.7551574 , 347.52579425, 347.46107513, 347.59943932,\n","       347.59180596, 347.52224678, 347.54693879, 347.57569318,\n","       347.55430496, 347.54575047, 347.5594038 , 347.55977622,\n","       347.5525769 , 347.55452899, 347.5576849 , 347.55573096,\n","       347.5546748 , 347.55600396, 347.55615619, 347.55542077,\n","       347.5555609 , 347.55590094, 347.55572686, 347.5556022 ,\n","       347.55572972, 347.55575644, 347.55568227, 347.5556905 ,\n","       347.55572656, 347.55571154, 347.5556973 , 347.55570934,\n","       347.55571314, 347.55570576, 347.55570598, 347.55570975,\n","       347.55570851, 347.55570692, 347.55570804, 347.55570853,\n","       347.55570781, 347.55570777, 347.55570815, 347.55570806,\n","       347.55570789, 347.55570799, 347.55570805, 347.55570798,\n","       347.55570797, 347.55570801, 347.555708  , 347.55570798,\n","       347.55570799, 347.555708  , 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799, 347.55570799, 347.55570799,\n","       347.55570799, 347.55570799])"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["rmse"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OjAhcWP_jEJ_","executionInfo":{"status":"ok","timestamp":1733548594410,"user_tz":300,"elapsed":578,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"6fa4cfd4-5201-479a-e072-cb326528aa2b"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["23.187424995341853"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["mape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D1wBKGRuobTZ","executionInfo":{"status":"ok","timestamp":1733549998791,"user_tz":300,"elapsed":515,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"dc5733b4-f6a1-431e-e9e8-2187c920a279"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.058523339244447796"]},"metadata":{},"execution_count":41}]},{"cell_type":"markdown","source":[],"metadata":{"id":"vL7oNkaGiqWR"}},{"cell_type":"code","source":["rmse_list = []\n","mape_list = []\n","for stock in filtered_df_orig.columns:\n","    forecast, rmse, mape = arima_forecast(\n","        stock_series=filtered_df_orig[stock],\n","        train_start='2017-01-03',\n","        train_end='2021-12-31',\n","        test_start='2022-01-01',\n","        test_end='2022-12-30',\n","        arima_order=(2, 1, 3)\n","    )\n","    rmse_list.append({'Stock': stock, 'RMSE': rmse})\n","    mape_list.append({'Stock': stock, 'MAPE': mape})\n","    print(f\"Stock: {stock}, RMSE: {rmse}, MAPE: {mape}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"STcxkWwgbjMT","executionInfo":{"status":"ok","timestamp":1733551682739,"user_tz":300,"elapsed":281854,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"f7497b04-502a-415d-b166-eac618854428"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: 3IN, RMSE: 23.187424995341853, MAPE: 0.058523339244447796\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: FOUR, RMSE: 655.6950549462227, MAPE: 0.15098913324269464\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ABDN, RMSE: 43.66522823300217, MAPE: 0.2827022812591693\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ALW, RMSE: 74.62329594909288, MAPE: 0.07299585387673933\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ATT, RMSE: 113.99813687408147, MAPE: 0.4740526243398169\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ASHM, RMSE: 47.399224126282206, MAPE: 0.25138670930835877\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: DGN, RMSE: 76.40650297706132, MAPE: 0.16564437672286783\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: AGR, RMSE: 6.490812065440881, MAPE: 0.09609934689332861\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: AGT, RMSE: 28.461144882871693, MAPE: 0.14485859820783545\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BGFD, RMSE: 216.36025994067822, MAPE: 0.2755261933167653\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BBY, RMSE: 39.55074138036067, MAPE: 0.10382398578246993\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BNKR, RMSE: 20.16646006255423, MAPE: 0.18838954557911528\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BGEO, RMSE: 407.86753799050797, MAPE: 0.24098774949041085\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BAG, RMSE: 29.506951061320365, MAPE: 0.0500130243562247\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BHMG, RMSE: 69.2690676411382, MAPE: 0.1322437612832121\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BYG, RMSE: 464.43103778755045, MAPE: 0.3793824329600544\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BRGE, RMSE: 216.66382163606656, MAPE: 0.4472161695744952\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BRSC, RMSE: 668.8967396407311, MAPE: 0.4607836500535783\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: THRG, RMSE: 348.61396705501886, MAPE: 0.5576523275786511\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BRWM, RMSE: 88.57664985805637, MAPE: 0.10391928849926031\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BMY, RMSE: 57.065980773507626, MAPE: 0.11542254760183229\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BOY, RMSE: 234.63875470997755, MAPE: 0.41571797078291367\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BREE, RMSE: 126.82709897086418, MAPE: 0.39937159203069883\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BVIC, RMSE: 104.1346238944713, MAPE: 0.1278550416306181\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BUT, RMSE: 110.59919790516545, MAPE: 0.10363509611131023\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: BRBY, RMSE: 160.1437552085791, MAPE: 0.08203910667106211\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CCR, RMSE: 43.73942268565633, MAPE: 0.23831390986414247\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CLDN, RMSE: 498.15992019874005, MAPE: 0.13026800517936257\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CCL, RMSE: 543.0110796145348, MAPE: 0.6446718901800108\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CWR, RMSE: 456.0716156808581, MAPE: 0.9130621171510372\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CHG, RMSE: 32.01181950931546, MAPE: 0.08681899921347071\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CTY, RMSE: 15.758750677586967, MAPE: 0.034727500048634785\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CKN, RMSE: 635.6938705455929, MAPE: 0.20291262117206896\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CBG, RMSE: 252.4906976129558, MAPE: 0.2534221924609393\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: COA, RMSE: 5.747426276918583, MAPE: 0.07774941987804793\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CCC, RMSE: 524.112578490079, MAPE: 0.21820180005041304\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: CURY, RMSE: 35.33574360654809, MAPE: 0.47415068923160697\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: DLN, RMSE: 677.0610848741904, MAPE: 0.25512736237993977\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: DSCV, RMSE: 254.14483033573237, MAPE: 0.34163704121212024\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: DOM, RMSE: 139.3382409560193, MAPE: 0.4971031404216223\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: DRX, RMSE: 99.96333982091853, MAPE: 0.1263978732417846\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: DNLM, RMSE: 353.48861402341737, MAPE: 0.43231263280395\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: EDIN, RMSE: 27.00904413482351, MAPE: 0.03520790081167522\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: EWI, RMSE: 101.63723735588759, MAPE: 0.5306368460123158\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ELM, RMSE: 21.854329377738537, MAPE: 0.18509830424289195\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ESNT, RMSE: 71.11103369040663, MAPE: 0.31289691285322785\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: EOT, RMSE: 144.37720161801533, MAPE: 0.2010520055195108\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ESCT, RMSE: 34.160359745299196, MAPE: 0.22265042952006667\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: FCSS, RMSE: 68.67291307405593, MAPE: 0.26535302140606337\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: FEML, RMSE: 182.6666997649122, MAPE: 0.28201739735004455\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: FEV, RMSE: 45.71288153265717, MAPE: 0.14588758070781546\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: FSV, RMSE: 31.368498500528165, MAPE: 0.10326956628612155\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: FGT, RMSE: 96.40422718903478, MAPE: 0.11213398762361677\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: FGP, RMSE: 15.402117182270938, MAPE: 0.09864768411407794\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: FUTR, RMSE: 1931.768934584463, MAPE: 1.1094134413549428\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: GNS, RMSE: 2031.1637635448851, MAPE: 0.7491897007063751\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: GSCT, RMSE: 23.55764374195109, MAPE: 0.15396966066070372\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: GDWN, RMSE: 336.22285602000807, MAPE: 0.09682633136895546\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: GFTU, RMSE: 331.7037367795196, MAPE: 0.41741340957288336\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: GRI, RMSE: 44.49846147084072, MAPE: 0.15250951342347316\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: GPE, RMSE: 114.0611564863119, MAPE: 0.22791855736147723\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: GNC, RMSE: 37.94736786849085, MAPE: 0.38728777533187403\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: GRG, RMSE: 946.4720092708258, MAPE: 0.46036212420466843\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HMSO, RMSE: 87.55716674524209, MAPE: 0.34106342801818096\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HVPE, RMSE: 561.0437457282625, MAPE: 0.2289869076945728\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HWG, RMSE: 40.444933353492424, MAPE: 0.2660677394214638\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HAS, RMSE: 20.255703002490502, MAPE: 0.17678855231243226\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HET, RMSE: 23.395849466218856, MAPE: 0.15766105808862652\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HSL, RMSE: 364.67334168107817, MAPE: 0.4083567398373691\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HRI, RMSE: 706.1548946576899, MAPE: 0.39203262011764817\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HGT, RMSE: 52.02964468963052, MAPE: 0.1216871334491503\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HICL, RMSE: 7.042853248290653, MAPE: 0.03129126104260407\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HILS, RMSE: 529.0462683928082, MAPE: 0.44923808965517276\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HFG, RMSE: 264.9994501966447, MAPE: 0.3144138757557225\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HOC, RMSE: 42.96982654610932, MAPE: 0.5152512567592564\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: HTG, RMSE: 99.30563691125047, MAPE: 0.3509533211273912\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ICGT, RMSE: 168.93663398313672, MAPE: 0.14431018402729545\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: IGG, RMSE: 43.10665987204156, MAPE: 0.05202143638812762\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: IEM, RMSE: 116.20634286548022, MAPE: 0.26677117240188974\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: INCH, RMSE: 134.15488874251946, MAPE: 0.18053923106134903\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: INPP, RMSE: 10.974853042379326, MAPE: 0.05503733586705393\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: INVP, RMSE: 65.70779714324638, MAPE: 0.1418172570974949\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: IPO, RMSE: 45.19040671922872, MAPE: 0.6165373422969805\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ITV, RMSE: 27.81668337770196, MAPE: 0.4296870560437752\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: IWG, RMSE: 101.28652627449367, MAPE: 0.5265085000209776\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: JAM, RMSE: 49.32290251595116, MAPE: 0.05884053963898634\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: JMG, RMSE: 21.20023283337431, MAPE: 0.18975437037714765\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: JEDT, RMSE: 136.79740328665542, MAPE: 0.3274263219674858\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: JGGI, RMSE: 32.02562766991608, MAPE: 0.06332251777318618\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: JII, RMSE: 40.78182806779747, MAPE: 0.0425299524680738\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: JFJ, RMSE: 187.69924282360654, MAPE: 0.38908673112413145\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: KLR, RMSE: 192.0137089064282, MAPE: 0.27890145959275636\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: KIE, RMSE: 35.03102904430833, MAPE: 0.4818381208818826\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: LRE, RMSE: 68.37190365809612, MAPE: 0.17339791534212792\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: LWDB, RMSE: 43.43769586168786, MAPE: 0.04349596614024385\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: EMG, RMSE: 20.59541000188038, MAPE: 0.08435624149868727\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MSLH, RMSE: 236.6411387857403, MAPE: 0.635915666878138\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MEGP, RMSE: 26.864341098943047, MAPE: 0.2704062832869577\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MRC, RMSE: 70.26350356312824, MAPE: 0.34436184770464634\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MRCH, RMSE: 22.57820694334583, MAPE: 0.030942887834103348\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MAB, RMSE: 82.53135700215499, MAPE: 0.4599168653509162\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MTO, RMSE: 8.82610694711669, MAPE: 0.13105837916432994\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MONY, RMSE: 18.494218420184502, MAPE: 0.09975842299243991\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MNKS, RMSE: 356.06618048208145, MAPE: 0.3452471556210251\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MGAM, RMSE: 58.96455165695324, MAPE: 0.2165256652046727\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MGNS, RMSE: 543.0711429807493, MAPE: 0.31785585778515985\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MUT, RMSE: 85.32553342715927, MAPE: 0.09301150849123271\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: MYI, RMSE: 18.72191370100936, MAPE: 0.06361510964599436\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: NBPE, RMSE: 280.7052985786473, MAPE: 0.17053339242092463\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: NCC, RMSE: 30.093187264891757, MAPE: 0.15106417219157714\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: NAS, RMSE: 1016.2538725932798, MAPE: 0.2638756772751423\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: OXIG, RMSE: 527.3448778896386, MAPE: 0.2516489827594267\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PHI, RMSE: 224.73258067355445, MAPE: 0.341561956326152\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PAGE, RMSE: 132.49263262767684, MAPE: 0.3217087048369742\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PIN, RMSE: 63.75973191228149, MAPE: 0.21827551924945543\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PAG, RMSE: 59.35826987092336, MAPE: 0.12001884193290147\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PPET, RMSE: 121.3220318919272, MAPE: 0.25453901319704253\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PAY, RMSE: 66.2879819271149, MAPE: 0.12152685444960269\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PNN, RMSE: 153.93956260677874, MAPE: 0.1680657912548796\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PNL, RMSE: 18.03928969541876, MAPE: 0.032854928449458705\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PTEC, RMSE: 202.90563402287424, MAPE: 0.37118100974934726\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PCT, RMSE: 71.13572166772033, MAPE: 0.34637921844571645\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PPH, RMSE: 105.52089637011069, MAPE: 0.06282221190438432\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PFD, RMSE: 6.4580394218325, MAPE: 0.049656293015154195\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PHP, RMSE: 16.317851081614396, MAPE: 0.11621066343177103\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: PZC, RMSE: 7.482341067530495, MAPE: 0.03382808896710792\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: QQ, RMSE: 77.71470588078097, MAPE: 0.20979868003317861\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: RAT, RMSE: 141.24577426900822, MAPE: 0.07151653504276209\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: RWI, RMSE: 129.41291395088527, MAPE: 0.18205981863853685\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: RSW, RMSE: 806.2154522634405, MAPE: 0.20608456167479655\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: RCP, RMSE: 362.4039261972046, MAPE: 0.14986681379588118\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ROR, RMSE: 73.58263583846598, MAPE: 0.265674982181874\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: RICA, RMSE: 15.558841361181104, MAPE: 0.0443259001588493\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SAFE, RMSE: 302.2253560184597, MAPE: 0.2885289158394474\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SVS, RMSE: 329.10902326387014, MAPE: 0.32089111188819514\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SDP, RMSE: 75.24744454237184, MAPE: 0.1368282916517052\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SOI, RMSE: 7.437802744492477, MAPE: 0.02339041208286818\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SAIN, RMSE: 54.8882597728068, MAPE: 0.10774458172134356\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SNR, RMSE: 21.67871352900755, MAPE: 0.1635818634638459\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SRP, RMSE: 28.90998658201141, MAPE: 0.15348514898303497\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SHC, RMSE: 35.13714947302894, MAPE: 0.24349888172075349\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SRE, RMSE: 40.193229388708595, MAPE: 0.4709254516225427\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SXS, RMSE: 656.5150622639125, MAPE: 0.22738988477962757\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: STEM, RMSE: 69.23359521381155, MAPE: 0.18972248790248358\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: STJ, RMSE: 388.1782447414271, MAPE: 0.3396258544597628\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: TATE, RMSE: 74.01086585321232, MAPE: 0.09331390196683086\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: TEP, RMSE: 391.95477336814236, MAPE: 0.16233353264443448\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: TMPL, RMSE: 12.027416723959512, MAPE: 0.0420332511555781\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: TEM, RMSE: 26.870795443060402, MAPE: 0.17188554384846166\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: TCAP, RMSE: 22.209093546788658, MAPE: 0.16586005560870196\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: TPK, RMSE: 452.7552812476149, MAPE: 0.45848738389928656\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: TRY, RMSE: 122.73813426669672, MAPE: 0.3050549289386351\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: VSVS, RMSE: 71.1564056729183, MAPE: 0.21451490052920996\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: VCT, RMSE: 537.3347496085768, MAPE: 0.3200857554019406\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: VOF, RMSE: 47.679962524808694, MAPE: 0.08067741258213003\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: JDW, RMSE: 345.1348013773036, MAPE: 0.5859430149236803\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: SMWH, RMSE: 123.4771967499555, MAPE: 0.06960472940847563\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: WG, RMSE: 43.25763781099297, MAPE: 0.2526729960579704\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: WKP, RMSE: 211.3874880068303, MAPE: 0.4135467810747474\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Stock: WWH, RMSE: 40.17345139098481, MAPE: 0.11899757810798281\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Stock: ZIG, RMSE: 59.247799765344396, MAPE: 0.17439340007741297\n","Stock: ASL, RMSE: 212.48978465233841, MAPE: 0.15649555191477543\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n","  return get_prediction_index(\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n","  return get_prediction_index(\n"]}]},{"cell_type":"code","source":["rmse_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"FrLI0X3ub9LT","executionInfo":{"status":"ok","timestamp":1733551768039,"user_tz":300,"elapsed":557,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"e4249d83-bbf0-4ca1-b275-41513c88d076"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'Stock': '3IN', 'RMSE': 23.187424995341853},\n"," {'Stock': 'FOUR', 'RMSE': 655.6950549462227},\n"," {'Stock': 'ABDN', 'RMSE': 43.66522823300217},\n"," {'Stock': 'ALW', 'RMSE': 74.62329594909288},\n"," {'Stock': 'ATT', 'RMSE': 113.99813687408147},\n"," {'Stock': 'ASHM', 'RMSE': 47.399224126282206},\n"," {'Stock': 'DGN', 'RMSE': 76.40650297706132},\n"," {'Stock': 'AGR', 'RMSE': 6.490812065440881},\n"," {'Stock': 'AGT', 'RMSE': 28.461144882871693},\n"," {'Stock': 'BGFD', 'RMSE': 216.36025994067822},\n"," {'Stock': 'BBY', 'RMSE': 39.55074138036067},\n"," {'Stock': 'BNKR', 'RMSE': 20.16646006255423},\n"," {'Stock': 'BGEO', 'RMSE': 407.86753799050797},\n"," {'Stock': 'BAG', 'RMSE': 29.506951061320365},\n"," {'Stock': 'BHMG', 'RMSE': 69.2690676411382},\n"," {'Stock': 'BYG', 'RMSE': 464.43103778755045},\n"," {'Stock': 'BRGE', 'RMSE': 216.66382163606656},\n"," {'Stock': 'BRSC', 'RMSE': 668.8967396407311},\n"," {'Stock': 'THRG', 'RMSE': 348.61396705501886},\n"," {'Stock': 'BRWM', 'RMSE': 88.57664985805637},\n"," {'Stock': 'BMY', 'RMSE': 57.065980773507626},\n"," {'Stock': 'BOY', 'RMSE': 234.63875470997755},\n"," {'Stock': 'BREE', 'RMSE': 126.82709897086418},\n"," {'Stock': 'BVIC', 'RMSE': 104.1346238944713},\n"," {'Stock': 'BUT', 'RMSE': 110.59919790516545},\n"," {'Stock': 'BRBY', 'RMSE': 160.1437552085791},\n"," {'Stock': 'CCR', 'RMSE': 43.73942268565633},\n"," {'Stock': 'CLDN', 'RMSE': 498.15992019874005},\n"," {'Stock': 'CCL', 'RMSE': 543.0110796145348},\n"," {'Stock': 'CWR', 'RMSE': 456.0716156808581},\n"," {'Stock': 'CHG', 'RMSE': 32.01181950931546},\n"," {'Stock': 'CTY', 'RMSE': 15.758750677586967},\n"," {'Stock': 'CKN', 'RMSE': 635.6938705455929},\n"," {'Stock': 'CBG', 'RMSE': 252.4906976129558},\n"," {'Stock': 'COA', 'RMSE': 5.747426276918583},\n"," {'Stock': 'CCC', 'RMSE': 524.112578490079},\n"," {'Stock': 'CURY', 'RMSE': 35.33574360654809},\n"," {'Stock': 'DLN', 'RMSE': 677.0610848741904},\n"," {'Stock': 'DSCV', 'RMSE': 254.14483033573237},\n"," {'Stock': 'DOM', 'RMSE': 139.3382409560193},\n"," {'Stock': 'DRX', 'RMSE': 99.96333982091853},\n"," {'Stock': 'DNLM', 'RMSE': 353.48861402341737},\n"," {'Stock': 'EDIN', 'RMSE': 27.00904413482351},\n"," {'Stock': 'EWI', 'RMSE': 101.63723735588759},\n"," {'Stock': 'ELM', 'RMSE': 21.854329377738537},\n"," {'Stock': 'ESNT', 'RMSE': 71.11103369040663},\n"," {'Stock': 'EOT', 'RMSE': 144.37720161801533},\n"," {'Stock': 'ESCT', 'RMSE': 34.160359745299196},\n"," {'Stock': 'FCSS', 'RMSE': 68.67291307405593},\n"," {'Stock': 'FEML', 'RMSE': 182.6666997649122},\n"," {'Stock': 'FEV', 'RMSE': 45.71288153265717},\n"," {'Stock': 'FSV', 'RMSE': 31.368498500528165},\n"," {'Stock': 'FGT', 'RMSE': 96.40422718903478},\n"," {'Stock': 'FGP', 'RMSE': 15.402117182270938},\n"," {'Stock': 'FUTR', 'RMSE': 1931.768934584463},\n"," {'Stock': 'GNS', 'RMSE': 2031.1637635448851},\n"," {'Stock': 'GSCT', 'RMSE': 23.55764374195109},\n"," {'Stock': 'GDWN', 'RMSE': 336.22285602000807},\n"," {'Stock': 'GFTU', 'RMSE': 331.7037367795196},\n"," {'Stock': 'GRI', 'RMSE': 44.49846147084072},\n"," {'Stock': 'GPE', 'RMSE': 114.0611564863119},\n"," {'Stock': 'GNC', 'RMSE': 37.94736786849085},\n"," {'Stock': 'GRG', 'RMSE': 946.4720092708258},\n"," {'Stock': 'HMSO', 'RMSE': 87.55716674524209},\n"," {'Stock': 'HVPE', 'RMSE': 561.0437457282625},\n"," {'Stock': 'HWG', 'RMSE': 40.444933353492424},\n"," {'Stock': 'HAS', 'RMSE': 20.255703002490502},\n"," {'Stock': 'HET', 'RMSE': 23.395849466218856},\n"," {'Stock': 'HSL', 'RMSE': 364.67334168107817},\n"," {'Stock': 'HRI', 'RMSE': 706.1548946576899},\n"," {'Stock': 'HGT', 'RMSE': 52.02964468963052},\n"," {'Stock': 'HICL', 'RMSE': 7.042853248290653},\n"," {'Stock': 'HILS', 'RMSE': 529.0462683928082},\n"," {'Stock': 'HFG', 'RMSE': 264.9994501966447},\n"," {'Stock': 'HOC', 'RMSE': 42.96982654610932},\n"," {'Stock': 'HTG', 'RMSE': 99.30563691125047},\n"," {'Stock': 'ICGT', 'RMSE': 168.93663398313672},\n"," {'Stock': 'IGG', 'RMSE': 43.10665987204156},\n"," {'Stock': 'IEM', 'RMSE': 116.20634286548022},\n"," {'Stock': 'INCH', 'RMSE': 134.15488874251946},\n"," {'Stock': 'INPP', 'RMSE': 10.974853042379326},\n"," {'Stock': 'INVP', 'RMSE': 65.70779714324638},\n"," {'Stock': 'IPO', 'RMSE': 45.19040671922872},\n"," {'Stock': 'ITV', 'RMSE': 27.81668337770196},\n"," {'Stock': 'IWG', 'RMSE': 101.28652627449367},\n"," {'Stock': 'JAM', 'RMSE': 49.32290251595116},\n"," {'Stock': 'JMG', 'RMSE': 21.20023283337431},\n"," {'Stock': 'JEDT', 'RMSE': 136.79740328665542},\n"," {'Stock': 'JGGI', 'RMSE': 32.02562766991608},\n"," {'Stock': 'JII', 'RMSE': 40.78182806779747},\n"," {'Stock': 'JFJ', 'RMSE': 187.69924282360654},\n"," {'Stock': 'KLR', 'RMSE': 192.0137089064282},\n"," {'Stock': 'KIE', 'RMSE': 35.03102904430833},\n"," {'Stock': 'LRE', 'RMSE': 68.37190365809612},\n"," {'Stock': 'LWDB', 'RMSE': 43.43769586168786},\n"," {'Stock': 'EMG', 'RMSE': 20.59541000188038},\n"," {'Stock': 'MSLH', 'RMSE': 236.6411387857403},\n"," {'Stock': 'MEGP', 'RMSE': 26.864341098943047},\n"," {'Stock': 'MRC', 'RMSE': 70.26350356312824},\n"," {'Stock': 'MRCH', 'RMSE': 22.57820694334583},\n"," {'Stock': 'MAB', 'RMSE': 82.53135700215499},\n"," {'Stock': 'MTO', 'RMSE': 8.82610694711669},\n"," {'Stock': 'MONY', 'RMSE': 18.494218420184502},\n"," {'Stock': 'MNKS', 'RMSE': 356.06618048208145},\n"," {'Stock': 'MGAM', 'RMSE': 58.96455165695324},\n"," {'Stock': 'MGNS', 'RMSE': 543.0711429807493},\n"," {'Stock': 'MUT', 'RMSE': 85.32553342715927},\n"," {'Stock': 'MYI', 'RMSE': 18.72191370100936},\n"," {'Stock': 'NBPE', 'RMSE': 280.7052985786473},\n"," {'Stock': 'NCC', 'RMSE': 30.093187264891757},\n"," {'Stock': 'NAS', 'RMSE': 1016.2538725932798},\n"," {'Stock': 'OXIG', 'RMSE': 527.3448778896386},\n"," {'Stock': 'PHI', 'RMSE': 224.73258067355445},\n"," {'Stock': 'PAGE', 'RMSE': 132.49263262767684},\n"," {'Stock': 'PIN', 'RMSE': 63.75973191228149},\n"," {'Stock': 'PAG', 'RMSE': 59.35826987092336},\n"," {'Stock': 'PPET', 'RMSE': 121.3220318919272},\n"," {'Stock': 'PAY', 'RMSE': 66.2879819271149},\n"," {'Stock': 'PNN', 'RMSE': 153.93956260677874},\n"," {'Stock': 'PNL', 'RMSE': 18.03928969541876},\n"," {'Stock': 'PTEC', 'RMSE': 202.90563402287424},\n"," {'Stock': 'PCT', 'RMSE': 71.13572166772033},\n"," {'Stock': 'PPH', 'RMSE': 105.52089637011069},\n"," {'Stock': 'PFD', 'RMSE': 6.4580394218325},\n"," {'Stock': 'PHP', 'RMSE': 16.317851081614396},\n"," {'Stock': 'PZC', 'RMSE': 7.482341067530495},\n"," {'Stock': 'QQ', 'RMSE': 77.71470588078097},\n"," {'Stock': 'RAT', 'RMSE': 141.24577426900822},\n"," {'Stock': 'RWI', 'RMSE': 129.41291395088527},\n"," {'Stock': 'RSW', 'RMSE': 806.2154522634405},\n"," {'Stock': 'RCP', 'RMSE': 362.4039261972046},\n"," {'Stock': 'ROR', 'RMSE': 73.58263583846598},\n"," {'Stock': 'RICA', 'RMSE': 15.558841361181104},\n"," {'Stock': 'SAFE', 'RMSE': 302.2253560184597},\n"," {'Stock': 'SVS', 'RMSE': 329.10902326387014},\n"," {'Stock': 'SDP', 'RMSE': 75.24744454237184},\n"," {'Stock': 'SOI', 'RMSE': 7.437802744492477},\n"," {'Stock': 'SAIN', 'RMSE': 54.8882597728068},\n"," {'Stock': 'SNR', 'RMSE': 21.67871352900755},\n"," {'Stock': 'SRP', 'RMSE': 28.90998658201141},\n"," {'Stock': 'SHC', 'RMSE': 35.13714947302894},\n"," {'Stock': 'SRE', 'RMSE': 40.193229388708595},\n"," {'Stock': 'SXS', 'RMSE': 656.5150622639125},\n"," {'Stock': 'STEM', 'RMSE': 69.23359521381155},\n"," {'Stock': 'STJ', 'RMSE': 388.1782447414271},\n"," {'Stock': 'TATE', 'RMSE': 74.01086585321232},\n"," {'Stock': 'TEP', 'RMSE': 391.95477336814236},\n"," {'Stock': 'TMPL', 'RMSE': 12.027416723959512},\n"," {'Stock': 'TEM', 'RMSE': 26.870795443060402},\n"," {'Stock': 'TCAP', 'RMSE': 22.209093546788658},\n"," {'Stock': 'TPK', 'RMSE': 452.7552812476149},\n"," {'Stock': 'TRY', 'RMSE': 122.73813426669672},\n"," {'Stock': 'VSVS', 'RMSE': 71.1564056729183},\n"," {'Stock': 'VCT', 'RMSE': 537.3347496085768},\n"," {'Stock': 'VOF', 'RMSE': 47.679962524808694},\n"," {'Stock': 'JDW', 'RMSE': 345.1348013773036},\n"," {'Stock': 'SMWH', 'RMSE': 123.4771967499555},\n"," {'Stock': 'WG', 'RMSE': 43.25763781099297},\n"," {'Stock': 'WKP', 'RMSE': 211.3874880068303},\n"," {'Stock': 'WWH', 'RMSE': 40.17345139098481},\n"," {'Stock': 'ZIG', 'RMSE': 59.247799765344396},\n"," {'Stock': 'ASL', 'RMSE': 212.48978465233841}]"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["mape_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"JLOgVnJPujwZ","executionInfo":{"status":"ok","timestamp":1733551773312,"user_tz":300,"elapsed":197,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"c09e8040-b6b9-408d-fc3f-12db78d10316"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'Stock': '3IN', 'MAPE': 0.058523339244447796},\n"," {'Stock': 'FOUR', 'MAPE': 0.15098913324269464},\n"," {'Stock': 'ABDN', 'MAPE': 0.2827022812591693},\n"," {'Stock': 'ALW', 'MAPE': 0.07299585387673933},\n"," {'Stock': 'ATT', 'MAPE': 0.4740526243398169},\n"," {'Stock': 'ASHM', 'MAPE': 0.25138670930835877},\n"," {'Stock': 'DGN', 'MAPE': 0.16564437672286783},\n"," {'Stock': 'AGR', 'MAPE': 0.09609934689332861},\n"," {'Stock': 'AGT', 'MAPE': 0.14485859820783545},\n"," {'Stock': 'BGFD', 'MAPE': 0.2755261933167653},\n"," {'Stock': 'BBY', 'MAPE': 0.10382398578246993},\n"," {'Stock': 'BNKR', 'MAPE': 0.18838954557911528},\n"," {'Stock': 'BGEO', 'MAPE': 0.24098774949041085},\n"," {'Stock': 'BAG', 'MAPE': 0.0500130243562247},\n"," {'Stock': 'BHMG', 'MAPE': 0.1322437612832121},\n"," {'Stock': 'BYG', 'MAPE': 0.3793824329600544},\n"," {'Stock': 'BRGE', 'MAPE': 0.4472161695744952},\n"," {'Stock': 'BRSC', 'MAPE': 0.4607836500535783},\n"," {'Stock': 'THRG', 'MAPE': 0.5576523275786511},\n"," {'Stock': 'BRWM', 'MAPE': 0.10391928849926031},\n"," {'Stock': 'BMY', 'MAPE': 0.11542254760183229},\n"," {'Stock': 'BOY', 'MAPE': 0.41571797078291367},\n"," {'Stock': 'BREE', 'MAPE': 0.39937159203069883},\n"," {'Stock': 'BVIC', 'MAPE': 0.1278550416306181},\n"," {'Stock': 'BUT', 'MAPE': 0.10363509611131023},\n"," {'Stock': 'BRBY', 'MAPE': 0.08203910667106211},\n"," {'Stock': 'CCR', 'MAPE': 0.23831390986414247},\n"," {'Stock': 'CLDN', 'MAPE': 0.13026800517936257},\n"," {'Stock': 'CCL', 'MAPE': 0.6446718901800108},\n"," {'Stock': 'CWR', 'MAPE': 0.9130621171510372},\n"," {'Stock': 'CHG', 'MAPE': 0.08681899921347071},\n"," {'Stock': 'CTY', 'MAPE': 0.034727500048634785},\n"," {'Stock': 'CKN', 'MAPE': 0.20291262117206896},\n"," {'Stock': 'CBG', 'MAPE': 0.2534221924609393},\n"," {'Stock': 'COA', 'MAPE': 0.07774941987804793},\n"," {'Stock': 'CCC', 'MAPE': 0.21820180005041304},\n"," {'Stock': 'CURY', 'MAPE': 0.47415068923160697},\n"," {'Stock': 'DLN', 'MAPE': 0.25512736237993977},\n"," {'Stock': 'DSCV', 'MAPE': 0.34163704121212024},\n"," {'Stock': 'DOM', 'MAPE': 0.4971031404216223},\n"," {'Stock': 'DRX', 'MAPE': 0.1263978732417846},\n"," {'Stock': 'DNLM', 'MAPE': 0.43231263280395},\n"," {'Stock': 'EDIN', 'MAPE': 0.03520790081167522},\n"," {'Stock': 'EWI', 'MAPE': 0.5306368460123158},\n"," {'Stock': 'ELM', 'MAPE': 0.18509830424289195},\n"," {'Stock': 'ESNT', 'MAPE': 0.31289691285322785},\n"," {'Stock': 'EOT', 'MAPE': 0.2010520055195108},\n"," {'Stock': 'ESCT', 'MAPE': 0.22265042952006667},\n"," {'Stock': 'FCSS', 'MAPE': 0.26535302140606337},\n"," {'Stock': 'FEML', 'MAPE': 0.28201739735004455},\n"," {'Stock': 'FEV', 'MAPE': 0.14588758070781546},\n"," {'Stock': 'FSV', 'MAPE': 0.10326956628612155},\n"," {'Stock': 'FGT', 'MAPE': 0.11213398762361677},\n"," {'Stock': 'FGP', 'MAPE': 0.09864768411407794},\n"," {'Stock': 'FUTR', 'MAPE': 1.1094134413549428},\n"," {'Stock': 'GNS', 'MAPE': 0.7491897007063751},\n"," {'Stock': 'GSCT', 'MAPE': 0.15396966066070372},\n"," {'Stock': 'GDWN', 'MAPE': 0.09682633136895546},\n"," {'Stock': 'GFTU', 'MAPE': 0.41741340957288336},\n"," {'Stock': 'GRI', 'MAPE': 0.15250951342347316},\n"," {'Stock': 'GPE', 'MAPE': 0.22791855736147723},\n"," {'Stock': 'GNC', 'MAPE': 0.38728777533187403},\n"," {'Stock': 'GRG', 'MAPE': 0.46036212420466843},\n"," {'Stock': 'HMSO', 'MAPE': 0.34106342801818096},\n"," {'Stock': 'HVPE', 'MAPE': 0.2289869076945728},\n"," {'Stock': 'HWG', 'MAPE': 0.2660677394214638},\n"," {'Stock': 'HAS', 'MAPE': 0.17678855231243226},\n"," {'Stock': 'HET', 'MAPE': 0.15766105808862652},\n"," {'Stock': 'HSL', 'MAPE': 0.4083567398373691},\n"," {'Stock': 'HRI', 'MAPE': 0.39203262011764817},\n"," {'Stock': 'HGT', 'MAPE': 0.1216871334491503},\n"," {'Stock': 'HICL', 'MAPE': 0.03129126104260407},\n"," {'Stock': 'HILS', 'MAPE': 0.44923808965517276},\n"," {'Stock': 'HFG', 'MAPE': 0.3144138757557225},\n"," {'Stock': 'HOC', 'MAPE': 0.5152512567592564},\n"," {'Stock': 'HTG', 'MAPE': 0.3509533211273912},\n"," {'Stock': 'ICGT', 'MAPE': 0.14431018402729545},\n"," {'Stock': 'IGG', 'MAPE': 0.05202143638812762},\n"," {'Stock': 'IEM', 'MAPE': 0.26677117240188974},\n"," {'Stock': 'INCH', 'MAPE': 0.18053923106134903},\n"," {'Stock': 'INPP', 'MAPE': 0.05503733586705393},\n"," {'Stock': 'INVP', 'MAPE': 0.1418172570974949},\n"," {'Stock': 'IPO', 'MAPE': 0.6165373422969805},\n"," {'Stock': 'ITV', 'MAPE': 0.4296870560437752},\n"," {'Stock': 'IWG', 'MAPE': 0.5265085000209776},\n"," {'Stock': 'JAM', 'MAPE': 0.05884053963898634},\n"," {'Stock': 'JMG', 'MAPE': 0.18975437037714765},\n"," {'Stock': 'JEDT', 'MAPE': 0.3274263219674858},\n"," {'Stock': 'JGGI', 'MAPE': 0.06332251777318618},\n"," {'Stock': 'JII', 'MAPE': 0.0425299524680738},\n"," {'Stock': 'JFJ', 'MAPE': 0.38908673112413145},\n"," {'Stock': 'KLR', 'MAPE': 0.27890145959275636},\n"," {'Stock': 'KIE', 'MAPE': 0.4818381208818826},\n"," {'Stock': 'LRE', 'MAPE': 0.17339791534212792},\n"," {'Stock': 'LWDB', 'MAPE': 0.04349596614024385},\n"," {'Stock': 'EMG', 'MAPE': 0.08435624149868727},\n"," {'Stock': 'MSLH', 'MAPE': 0.635915666878138},\n"," {'Stock': 'MEGP', 'MAPE': 0.2704062832869577},\n"," {'Stock': 'MRC', 'MAPE': 0.34436184770464634},\n"," {'Stock': 'MRCH', 'MAPE': 0.030942887834103348},\n"," {'Stock': 'MAB', 'MAPE': 0.4599168653509162},\n"," {'Stock': 'MTO', 'MAPE': 0.13105837916432994},\n"," {'Stock': 'MONY', 'MAPE': 0.09975842299243991},\n"," {'Stock': 'MNKS', 'MAPE': 0.3452471556210251},\n"," {'Stock': 'MGAM', 'MAPE': 0.2165256652046727},\n"," {'Stock': 'MGNS', 'MAPE': 0.31785585778515985},\n"," {'Stock': 'MUT', 'MAPE': 0.09301150849123271},\n"," {'Stock': 'MYI', 'MAPE': 0.06361510964599436},\n"," {'Stock': 'NBPE', 'MAPE': 0.17053339242092463},\n"," {'Stock': 'NCC', 'MAPE': 0.15106417219157714},\n"," {'Stock': 'NAS', 'MAPE': 0.2638756772751423},\n"," {'Stock': 'OXIG', 'MAPE': 0.2516489827594267},\n"," {'Stock': 'PHI', 'MAPE': 0.341561956326152},\n"," {'Stock': 'PAGE', 'MAPE': 0.3217087048369742},\n"," {'Stock': 'PIN', 'MAPE': 0.21827551924945543},\n"," {'Stock': 'PAG', 'MAPE': 0.12001884193290147},\n"," {'Stock': 'PPET', 'MAPE': 0.25453901319704253},\n"," {'Stock': 'PAY', 'MAPE': 0.12152685444960269},\n"," {'Stock': 'PNN', 'MAPE': 0.1680657912548796},\n"," {'Stock': 'PNL', 'MAPE': 0.032854928449458705},\n"," {'Stock': 'PTEC', 'MAPE': 0.37118100974934726},\n"," {'Stock': 'PCT', 'MAPE': 0.34637921844571645},\n"," {'Stock': 'PPH', 'MAPE': 0.06282221190438432},\n"," {'Stock': 'PFD', 'MAPE': 0.049656293015154195},\n"," {'Stock': 'PHP', 'MAPE': 0.11621066343177103},\n"," {'Stock': 'PZC', 'MAPE': 0.03382808896710792},\n"," {'Stock': 'QQ', 'MAPE': 0.20979868003317861},\n"," {'Stock': 'RAT', 'MAPE': 0.07151653504276209},\n"," {'Stock': 'RWI', 'MAPE': 0.18205981863853685},\n"," {'Stock': 'RSW', 'MAPE': 0.20608456167479655},\n"," {'Stock': 'RCP', 'MAPE': 0.14986681379588118},\n"," {'Stock': 'ROR', 'MAPE': 0.265674982181874},\n"," {'Stock': 'RICA', 'MAPE': 0.0443259001588493},\n"," {'Stock': 'SAFE', 'MAPE': 0.2885289158394474},\n"," {'Stock': 'SVS', 'MAPE': 0.32089111188819514},\n"," {'Stock': 'SDP', 'MAPE': 0.1368282916517052},\n"," {'Stock': 'SOI', 'MAPE': 0.02339041208286818},\n"," {'Stock': 'SAIN', 'MAPE': 0.10774458172134356},\n"," {'Stock': 'SNR', 'MAPE': 0.1635818634638459},\n"," {'Stock': 'SRP', 'MAPE': 0.15348514898303497},\n"," {'Stock': 'SHC', 'MAPE': 0.24349888172075349},\n"," {'Stock': 'SRE', 'MAPE': 0.4709254516225427},\n"," {'Stock': 'SXS', 'MAPE': 0.22738988477962757},\n"," {'Stock': 'STEM', 'MAPE': 0.18972248790248358},\n"," {'Stock': 'STJ', 'MAPE': 0.3396258544597628},\n"," {'Stock': 'TATE', 'MAPE': 0.09331390196683086},\n"," {'Stock': 'TEP', 'MAPE': 0.16233353264443448},\n"," {'Stock': 'TMPL', 'MAPE': 0.0420332511555781},\n"," {'Stock': 'TEM', 'MAPE': 0.17188554384846166},\n"," {'Stock': 'TCAP', 'MAPE': 0.16586005560870196},\n"," {'Stock': 'TPK', 'MAPE': 0.45848738389928656},\n"," {'Stock': 'TRY', 'MAPE': 0.3050549289386351},\n"," {'Stock': 'VSVS', 'MAPE': 0.21451490052920996},\n"," {'Stock': 'VCT', 'MAPE': 0.3200857554019406},\n"," {'Stock': 'VOF', 'MAPE': 0.08067741258213003},\n"," {'Stock': 'JDW', 'MAPE': 0.5859430149236803},\n"," {'Stock': 'SMWH', 'MAPE': 0.06960472940847563},\n"," {'Stock': 'WG', 'MAPE': 0.2526729960579704},\n"," {'Stock': 'WKP', 'MAPE': 0.4135467810747474},\n"," {'Stock': 'WWH', 'MAPE': 0.11899757810798281},\n"," {'Stock': 'ZIG', 'MAPE': 0.17439340007741297},\n"," {'Stock': 'ASL', 'MAPE': 0.15649555191477543}]"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["arima_individual_rmse_df = pd.DataFrame(rmse_list)\n","arima_individual_rmse_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"LOM25LEjvQfm","executionInfo":{"status":"ok","timestamp":1733551802084,"user_tz":300,"elapsed":563,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"a1688caf-54f1-47f7-a7d4-ba9858def556"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Stock        RMSE\n","0     3IN   23.187425\n","1    FOUR  655.695055\n","2    ABDN   43.665228\n","3     ALW   74.623296\n","4     ATT  113.998137\n","..    ...         ...\n","157    WG   43.257638\n","158   WKP  211.387488\n","159   WWH   40.173451\n","160   ZIG   59.247800\n","161   ASL  212.489785\n","\n","[162 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-54c0bb23-6c14-4c0a-a0e6-e94515c00fcc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Stock</th>\n","      <th>RMSE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3IN</td>\n","      <td>23.187425</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>FOUR</td>\n","      <td>655.695055</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ABDN</td>\n","      <td>43.665228</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ALW</td>\n","      <td>74.623296</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ATT</td>\n","      <td>113.998137</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>157</th>\n","      <td>WG</td>\n","      <td>43.257638</td>\n","    </tr>\n","    <tr>\n","      <th>158</th>\n","      <td>WKP</td>\n","      <td>211.387488</td>\n","    </tr>\n","    <tr>\n","      <th>159</th>\n","      <td>WWH</td>\n","      <td>40.173451</td>\n","    </tr>\n","    <tr>\n","      <th>160</th>\n","      <td>ZIG</td>\n","      <td>59.247800</td>\n","    </tr>\n","    <tr>\n","      <th>161</th>\n","      <td>ASL</td>\n","      <td>212.489785</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>162 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54c0bb23-6c14-4c0a-a0e6-e94515c00fcc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-54c0bb23-6c14-4c0a-a0e6-e94515c00fcc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-54c0bb23-6c14-4c0a-a0e6-e94515c00fcc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9f296fd0-f745-4787-863f-503056853460\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f296fd0-f745-4787-863f-503056853460')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9f296fd0-f745-4787-863f-503056853460 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_448910ae-9226-4551-89fa-295ac3cce875\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('arima_individual_rmse_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_448910ae-9226-4551-89fa-295ac3cce875 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('arima_individual_rmse_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"arima_individual_rmse_df","summary":"{\n  \"name\": \"arima_individual_rmse_df\",\n  \"rows\": 162,\n  \"fields\": [\n    {\n      \"column\": \"Stock\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 162,\n        \"samples\": [\n          \"WKP\",\n          \"NCC\",\n          \"ROR\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 284.9567672700067,\n        \"min\": 5.747426276918583,\n        \"max\": 2031.1637635448851,\n        \"num_unique_values\": 162,\n        \"samples\": [\n          211.3874880068303,\n          30.093187264891757,\n          73.58263583846598\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["arima_individual_mape_df = pd.DataFrame(mape_list)\n","arima_individual_mape_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"gfup6sZrvVPt","executionInfo":{"status":"ok","timestamp":1733551810849,"user_tz":300,"elapsed":200,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"788eed1a-b741-4c7b-90e9-cba955fccaff"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Stock      MAPE\n","0     3IN  0.058523\n","1    FOUR  0.150989\n","2    ABDN  0.282702\n","3     ALW  0.072996\n","4     ATT  0.474053\n","..    ...       ...\n","157    WG  0.252673\n","158   WKP  0.413547\n","159   WWH  0.118998\n","160   ZIG  0.174393\n","161   ASL  0.156496\n","\n","[162 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-92a4a39b-5188-4ced-9a4d-2919c30e5100\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Stock</th>\n","      <th>MAPE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3IN</td>\n","      <td>0.058523</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>FOUR</td>\n","      <td>0.150989</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ABDN</td>\n","      <td>0.282702</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ALW</td>\n","      <td>0.072996</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ATT</td>\n","      <td>0.474053</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>157</th>\n","      <td>WG</td>\n","      <td>0.252673</td>\n","    </tr>\n","    <tr>\n","      <th>158</th>\n","      <td>WKP</td>\n","      <td>0.413547</td>\n","    </tr>\n","    <tr>\n","      <th>159</th>\n","      <td>WWH</td>\n","      <td>0.118998</td>\n","    </tr>\n","    <tr>\n","      <th>160</th>\n","      <td>ZIG</td>\n","      <td>0.174393</td>\n","    </tr>\n","    <tr>\n","      <th>161</th>\n","      <td>ASL</td>\n","      <td>0.156496</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>162 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92a4a39b-5188-4ced-9a4d-2919c30e5100')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-92a4a39b-5188-4ced-9a4d-2919c30e5100 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-92a4a39b-5188-4ced-9a4d-2919c30e5100');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7fb384f9-6e33-4161-b0b3-76c089c25f3a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7fb384f9-6e33-4161-b0b3-76c089c25f3a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7fb384f9-6e33-4161-b0b3-76c089c25f3a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_97f69df7-e31c-4f2b-816d-e843f1d76391\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('arima_individual_mape_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_97f69df7-e31c-4f2b-816d-e843f1d76391 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('arima_individual_mape_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"arima_individual_mape_df","summary":"{\n  \"name\": \"arima_individual_mape_df\",\n  \"rows\": 162,\n  \"fields\": [\n    {\n      \"column\": \"Stock\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 162,\n        \"samples\": [\n          \"WKP\",\n          \"NCC\",\n          \"ROR\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17561754485347522,\n        \"min\": 0.02339041208286818,\n        \"max\": 1.1094134413549428,\n        \"num_unique_values\": 162,\n        \"samples\": [\n          0.4135467810747474,\n          0.15106417219157714,\n          0.265674982181874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","source":["## Results:\n"],"metadata":{"id":"uaHuFbvgvYKB"}},{"cell_type":"code","source":["mean_rmse = arima_individual_rmse_df['RMSE'].mean()\n","mean_mape = arima_individual_mape_df['MAPE'].mean()\n","print(f\"Individual ARIMA prediction -- Mean RMSE: {mean_rmse}\")\n","print(f\"Individual ARIMA prediction -- Mean MAPE: {mean_mape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XItO_VMjvaX3","executionInfo":{"status":"ok","timestamp":1733551907319,"user_tz":300,"elapsed":546,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"fef8d253-1b7b-45c2-8446-5b469d13514e"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["Individual ARIMA prediction -- Mean RMSE: 191.46919642712257\n","Individual ARIMA prediction -- Mean MAPE: 0.24285821353214496\n"]}]},{"cell_type":"markdown","source":["### **Individual ARIMA prediction -- Mean RMSE: 191.46919642712257**\n","\n","### **Individual ARIMA prediction -- Mean MAPE: 0.24285821353214496**"],"metadata":{"id":"_XMwjWVPwrXe"}},{"cell_type":"markdown","source":[],"metadata":{"id":"ZlJvkagF3hXy"}},{"cell_type":"markdown","source":[],"metadata":{"id":"6vBvAczm3haq"}},{"cell_type":"markdown","source":[],"metadata":{"id":"uRbD59NR3hdJ"}},{"cell_type":"markdown","source":[],"metadata":{"id":"Cy6POT9R3hfl"}},{"cell_type":"markdown","source":[],"metadata":{"id":"ggwuLfw53hiT"}},{"cell_type":"markdown","source":[],"metadata":{"id":"i738QBTY3hk8"}},{"cell_type":"markdown","source":[],"metadata":{"id":"Rlyw8KP63hnj"}},{"cell_type":"markdown","source":[],"metadata":{"id":"QzPEeLW83hqY"}},{"cell_type":"markdown","source":[],"metadata":{"id":"9ektfkQv3hs4"}},{"cell_type":"markdown","source":[],"metadata":{"id":"4y08AwSU3hvl"}},{"cell_type":"markdown","source":[],"metadata":{"id":"qPamsYOb3hyQ"}},{"cell_type":"markdown","source":[],"metadata":{"id":"PYkSzhL03h1A"}},{"cell_type":"markdown","source":[],"metadata":{"id":"OeCMR_813h3s"}},{"cell_type":"markdown","source":[],"metadata":{"id":"JFUyq0Jr3h58"}},{"cell_type":"markdown","source":[],"metadata":{"id":"rhvzklVO3h8q"}},{"cell_type":"markdown","source":["# Faileddddddddd 😞 will try later"],"metadata":{"id":"sDUJgbro3iAE"}},{"cell_type":"markdown","source":["# Model 2: Train with Global data - VAR model"],"metadata":{"id":"aFn0boO1PLFI"}},{"cell_type":"code","source":["# Function to check stationarity and apply differencing if necessary\n","def make_stationary(data):\n","    \"\"\"\n","    Check stationarity for each column in the dataset using ADF test.\n","    Apply differencing to columns that are not stationary.\n","    \"\"\"\n","    stationary_data = data.copy()\n","    for column in data.columns:\n","        adf_result = adfuller(data[column])\n","        if adf_result[1] > 0.05:  # Apply differencing if not stationary\n","            stationary_data[column] = data[column].diff().dropna()\n","    return stationary_data.dropna()"],"metadata":{"id":"7-jTwEUCxpnT","executionInfo":{"status":"ok","timestamp":1733553102521,"user_tz":300,"elapsed":561,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["train_data_stationary = make_stationary(filtered_df_orig)\n","train_data_stationary"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"bTBlgHgu1Ncv","executionInfo":{"status":"ok","timestamp":1733553372416,"user_tz":300,"elapsed":14386,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"828db1e8-cb7f-4b0c-dfc3-2a9030054db8"},"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                3IN        FOUR      ABDN       ALW       ATT  \\\n","Date                                                                            \n","2017-01-04 00:00:00+00:00 -0.414413   51.938477 -0.311935  4.964722  0.125000   \n","2017-01-05 00:00:00+00:00  0.725601  -46.912109 -9.420990  2.979004 -0.150002   \n","2017-01-06 00:00:00+00:00 -0.103165   17.592163  0.499115  2.978760  0.500000   \n","2017-01-09 00:00:00+00:00 -0.208023   19.267334 -2.183640  8.440125  0.699997   \n","2017-01-10 00:00:00+00:00  0.000000  -26.806763  0.623901  0.000000  0.150002   \n","...                             ...         ...       ...       ...       ...   \n","2022-12-22 00:00:00+00:00  0.000000  -36.996582 -4.274094 -8.946838 -2.500000   \n","2022-12-23 00:00:00+00:00  1.960876  120.237305  0.460953  0.994141  0.000000   \n","2022-12-28 00:00:00+00:00  3.921692 -175.730957  0.879944  0.994080 -1.000000   \n","2022-12-29 00:00:00+00:00  2.941254    9.249023  1.759918  9.940979  7.000000   \n","2022-12-30 00:00:00+00:00  1.470612  -23.122070 -0.335251  0.000000 -2.500000   \n","\n","                               ASHM        DGN       AGR       AGT       BGFD  \\\n","Date                                                                            \n","2017-01-04 00:00:00+00:00  7.670517   2.872375  0.477718  0.499283   5.497009   \n","2017-01-05 00:00:00+00:00  3.741699   0.999176 -0.307102 -0.299591  -0.999512   \n","2017-01-06 00:00:00+00:00 -2.868652   1.373688  0.307102  0.199707   2.748474   \n","2017-01-09 00:00:00+00:00 -8.605896   4.870636 -0.204735  1.198303  11.243713   \n","2017-01-10 00:00:00+00:00 -1.184891   2.747528  0.000000  0.399384  -0.749573   \n","...                             ...        ...       ...       ...        ...   \n","2022-12-22 00:00:00+00:00 -4.353638   1.999603 -0.219902 -0.399872  -3.998840   \n","2022-12-23 00:00:00+00:00 -2.009384   1.999603  0.571739  0.799744   1.999390   \n","2022-12-28 00:00:00+00:00  3.014069   0.000000 -0.043983  0.000000   5.998291   \n","2022-12-29 00:00:00+00:00  4.855988   3.999207  0.703674  0.999634  -0.999695   \n","2022-12-30 00:00:00+00:00 -0.167465 -13.997223 -0.087959  0.599808   0.000000   \n","\n","                           ...      VSVS        VCT       VOF        JDW  \\\n","Date                       ...                                             \n","2017-01-04 00:00:00+00:00  ...  0.730438  10.077026 -0.498993  -4.297363   \n","2017-01-05 00:00:00+00:00  ... -0.146088   5.426270 -0.249512  10.027039   \n","2017-01-06 00:00:00+00:00  ...  0.584442  -9.301880  0.499023   4.297241   \n","2017-01-09 00:00:00+00:00  ... -1.314941   1.550293  0.498962   0.477478   \n","2017-01-10 00:00:00+00:00  ...  1.022736   0.000000 -1.496948   0.477539   \n","...                        ...       ...        ...       ...        ...   \n","2022-12-22 00:00:00+00:00  ...  5.031006 -11.078125 -3.997803 -11.795898   \n","2022-12-23 00:00:00+00:00  ...  5.031006  30.464600  0.000000   4.914948   \n","2022-12-28 00:00:00+00:00  ...  3.234222  -4.615723  5.996674   1.769379   \n","2022-12-29 00:00:00+00:00  ... -1.078033  -4.615845 -0.499725   5.111572   \n","2022-12-30 00:00:00+00:00  ...  0.000000  -1.846313 -1.998840   2.555786   \n","\n","                                  SMWH         WG        WKP       WWH  \\\n","Date                                                                     \n","2017-01-04 00:00:00+00:00  1346.138062  -0.741699   8.932800  2.398499   \n","2017-01-05 00:00:00+00:00  1386.425781   3.708496   7.816223  2.398483   \n","2017-01-06 00:00:00+00:00  1387.301758   2.225159   5.582947  2.098679   \n","2017-01-09 00:00:00+00:00  1397.811401   3.708618 -16.376770  4.597092   \n","2017-01-10 00:00:00+00:00  1400.438965 -15.205078   2.233154  4.197372   \n","...                                ...        ...        ...       ...   \n","2022-12-22 00:00:00+00:00  1443.464600   1.699997   4.151611  3.499481   \n","2022-12-23 00:00:00+00:00  1424.668457  -0.399994   0.541443  1.499756   \n","2022-12-28 00:00:00+00:00  1437.681274  -0.300003   7.581146 -2.999573   \n","2022-12-29 00:00:00+00:00  1426.596191   4.050003   1.985535  2.499664   \n","2022-12-30 00:00:00+00:00  1430.933838  -3.600006  -1.624481 -2.999542   \n","\n","                                ZIG        ASL  \n","Date                                            \n","2017-01-04 00:00:00+00:00  6.961212  -3.956299  \n","2017-01-05 00:00:00+00:00  8.618530   2.967651  \n","2017-01-06 00:00:00+00:00 -1.657440   0.988647  \n","2017-01-09 00:00:00+00:00  8.287048  -2.967407  \n","2017-01-10 00:00:00+00:00  0.663025  -3.956299  \n","...                             ...        ...  \n","2022-12-22 00:00:00+00:00 -1.335785   0.000000  \n","2022-12-23 00:00:00+00:00  1.781036  13.870728  \n","2022-12-28 00:00:00+00:00 -0.445251  -1.981445  \n","2022-12-29 00:00:00+00:00  0.890564  11.889160  \n","2022-12-30 00:00:00+00:00 -5.788422  -1.981445  \n","\n","[1514 rows x 162 columns]"],"text/html":["\n","  <div id=\"df-b6afedd0-87ee-4a44-8e7b-1108515d5357\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>3IN</th>\n","      <th>FOUR</th>\n","      <th>ABDN</th>\n","      <th>ALW</th>\n","      <th>ATT</th>\n","      <th>ASHM</th>\n","      <th>DGN</th>\n","      <th>AGR</th>\n","      <th>AGT</th>\n","      <th>BGFD</th>\n","      <th>...</th>\n","      <th>VSVS</th>\n","      <th>VCT</th>\n","      <th>VOF</th>\n","      <th>JDW</th>\n","      <th>SMWH</th>\n","      <th>WG</th>\n","      <th>WKP</th>\n","      <th>WWH</th>\n","      <th>ZIG</th>\n","      <th>ASL</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2017-01-04 00:00:00+00:00</th>\n","      <td>-0.414413</td>\n","      <td>51.938477</td>\n","      <td>-0.311935</td>\n","      <td>4.964722</td>\n","      <td>0.125000</td>\n","      <td>7.670517</td>\n","      <td>2.872375</td>\n","      <td>0.477718</td>\n","      <td>0.499283</td>\n","      <td>5.497009</td>\n","      <td>...</td>\n","      <td>0.730438</td>\n","      <td>10.077026</td>\n","      <td>-0.498993</td>\n","      <td>-4.297363</td>\n","      <td>1346.138062</td>\n","      <td>-0.741699</td>\n","      <td>8.932800</td>\n","      <td>2.398499</td>\n","      <td>6.961212</td>\n","      <td>-3.956299</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-05 00:00:00+00:00</th>\n","      <td>0.725601</td>\n","      <td>-46.912109</td>\n","      <td>-9.420990</td>\n","      <td>2.979004</td>\n","      <td>-0.150002</td>\n","      <td>3.741699</td>\n","      <td>0.999176</td>\n","      <td>-0.307102</td>\n","      <td>-0.299591</td>\n","      <td>-0.999512</td>\n","      <td>...</td>\n","      <td>-0.146088</td>\n","      <td>5.426270</td>\n","      <td>-0.249512</td>\n","      <td>10.027039</td>\n","      <td>1386.425781</td>\n","      <td>3.708496</td>\n","      <td>7.816223</td>\n","      <td>2.398483</td>\n","      <td>8.618530</td>\n","      <td>2.967651</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-06 00:00:00+00:00</th>\n","      <td>-0.103165</td>\n","      <td>17.592163</td>\n","      <td>0.499115</td>\n","      <td>2.978760</td>\n","      <td>0.500000</td>\n","      <td>-2.868652</td>\n","      <td>1.373688</td>\n","      <td>0.307102</td>\n","      <td>0.199707</td>\n","      <td>2.748474</td>\n","      <td>...</td>\n","      <td>0.584442</td>\n","      <td>-9.301880</td>\n","      <td>0.499023</td>\n","      <td>4.297241</td>\n","      <td>1387.301758</td>\n","      <td>2.225159</td>\n","      <td>5.582947</td>\n","      <td>2.098679</td>\n","      <td>-1.657440</td>\n","      <td>0.988647</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-09 00:00:00+00:00</th>\n","      <td>-0.208023</td>\n","      <td>19.267334</td>\n","      <td>-2.183640</td>\n","      <td>8.440125</td>\n","      <td>0.699997</td>\n","      <td>-8.605896</td>\n","      <td>4.870636</td>\n","      <td>-0.204735</td>\n","      <td>1.198303</td>\n","      <td>11.243713</td>\n","      <td>...</td>\n","      <td>-1.314941</td>\n","      <td>1.550293</td>\n","      <td>0.498962</td>\n","      <td>0.477478</td>\n","      <td>1397.811401</td>\n","      <td>3.708618</td>\n","      <td>-16.376770</td>\n","      <td>4.597092</td>\n","      <td>8.287048</td>\n","      <td>-2.967407</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-10 00:00:00+00:00</th>\n","      <td>0.000000</td>\n","      <td>-26.806763</td>\n","      <td>0.623901</td>\n","      <td>0.000000</td>\n","      <td>0.150002</td>\n","      <td>-1.184891</td>\n","      <td>2.747528</td>\n","      <td>0.000000</td>\n","      <td>0.399384</td>\n","      <td>-0.749573</td>\n","      <td>...</td>\n","      <td>1.022736</td>\n","      <td>0.000000</td>\n","      <td>-1.496948</td>\n","      <td>0.477539</td>\n","      <td>1400.438965</td>\n","      <td>-15.205078</td>\n","      <td>2.233154</td>\n","      <td>4.197372</td>\n","      <td>0.663025</td>\n","      <td>-3.956299</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-22 00:00:00+00:00</th>\n","      <td>0.000000</td>\n","      <td>-36.996582</td>\n","      <td>-4.274094</td>\n","      <td>-8.946838</td>\n","      <td>-2.500000</td>\n","      <td>-4.353638</td>\n","      <td>1.999603</td>\n","      <td>-0.219902</td>\n","      <td>-0.399872</td>\n","      <td>-3.998840</td>\n","      <td>...</td>\n","      <td>5.031006</td>\n","      <td>-11.078125</td>\n","      <td>-3.997803</td>\n","      <td>-11.795898</td>\n","      <td>1443.464600</td>\n","      <td>1.699997</td>\n","      <td>4.151611</td>\n","      <td>3.499481</td>\n","      <td>-1.335785</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-23 00:00:00+00:00</th>\n","      <td>1.960876</td>\n","      <td>120.237305</td>\n","      <td>0.460953</td>\n","      <td>0.994141</td>\n","      <td>0.000000</td>\n","      <td>-2.009384</td>\n","      <td>1.999603</td>\n","      <td>0.571739</td>\n","      <td>0.799744</td>\n","      <td>1.999390</td>\n","      <td>...</td>\n","      <td>5.031006</td>\n","      <td>30.464600</td>\n","      <td>0.000000</td>\n","      <td>4.914948</td>\n","      <td>1424.668457</td>\n","      <td>-0.399994</td>\n","      <td>0.541443</td>\n","      <td>1.499756</td>\n","      <td>1.781036</td>\n","      <td>13.870728</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-28 00:00:00+00:00</th>\n","      <td>3.921692</td>\n","      <td>-175.730957</td>\n","      <td>0.879944</td>\n","      <td>0.994080</td>\n","      <td>-1.000000</td>\n","      <td>3.014069</td>\n","      <td>0.000000</td>\n","      <td>-0.043983</td>\n","      <td>0.000000</td>\n","      <td>5.998291</td>\n","      <td>...</td>\n","      <td>3.234222</td>\n","      <td>-4.615723</td>\n","      <td>5.996674</td>\n","      <td>1.769379</td>\n","      <td>1437.681274</td>\n","      <td>-0.300003</td>\n","      <td>7.581146</td>\n","      <td>-2.999573</td>\n","      <td>-0.445251</td>\n","      <td>-1.981445</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-29 00:00:00+00:00</th>\n","      <td>2.941254</td>\n","      <td>9.249023</td>\n","      <td>1.759918</td>\n","      <td>9.940979</td>\n","      <td>7.000000</td>\n","      <td>4.855988</td>\n","      <td>3.999207</td>\n","      <td>0.703674</td>\n","      <td>0.999634</td>\n","      <td>-0.999695</td>\n","      <td>...</td>\n","      <td>-1.078033</td>\n","      <td>-4.615845</td>\n","      <td>-0.499725</td>\n","      <td>5.111572</td>\n","      <td>1426.596191</td>\n","      <td>4.050003</td>\n","      <td>1.985535</td>\n","      <td>2.499664</td>\n","      <td>0.890564</td>\n","      <td>11.889160</td>\n","    </tr>\n","    <tr>\n","      <th>2022-12-30 00:00:00+00:00</th>\n","      <td>1.470612</td>\n","      <td>-23.122070</td>\n","      <td>-0.335251</td>\n","      <td>0.000000</td>\n","      <td>-2.500000</td>\n","      <td>-0.167465</td>\n","      <td>-13.997223</td>\n","      <td>-0.087959</td>\n","      <td>0.599808</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>-1.846313</td>\n","      <td>-1.998840</td>\n","      <td>2.555786</td>\n","      <td>1430.933838</td>\n","      <td>-3.600006</td>\n","      <td>-1.624481</td>\n","      <td>-2.999542</td>\n","      <td>-5.788422</td>\n","      <td>-1.981445</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1514 rows × 162 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6afedd0-87ee-4a44-8e7b-1108515d5357')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b6afedd0-87ee-4a44-8e7b-1108515d5357 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b6afedd0-87ee-4a44-8e7b-1108515d5357');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9488902e-1625-48a5-8874-c0c464859e30\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9488902e-1625-48a5-8874-c0c464859e30')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9488902e-1625-48a5-8874-c0c464859e30 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_ad757e2f-4e87-4f14-94be-027ee0dccb50\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_data_stationary')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_ad757e2f-4e87-4f14-94be-027ee0dccb50 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_data_stationary');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_data_stationary"}},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["# Function to train VAR and predict for a single stock\n","def var_predict_all_stocks(df, target_stock, train_start, train_end, test_start, test_end):\n","    \"\"\"\n","    Train a VAR model on all stock data and predict the target stock prices.\n","    \"\"\"\n","    # Split data into training and testing sets\n","    train_data = df[train_start:train_end]\n","    test_data = df[test_start:test_end]\n","\n","    # Ensure stationarity\n","    train_data_stationary = make_stationary(train_data)\n","\n","    # Dynamically calculate maxlags based on dataset size\n","    max_lags = min(15, len(train_data_stationary) // (len(df.columns) + 1))\n","\n","    # Fit the VAR model\n","    model = VAR(train_data_stationary)\n","    results = model.fit(maxlags=max_lags, ic='aic')  # Automatically select lag order\n","\n","    # Forecast differenced values\n","    forecast_diff = results.forecast(train_data_stationary.values[-results.k_ar:], steps=len(test_data))\n","    forecast_df = pd.DataFrame(forecast_diff, index=test_data.index, columns=test_data.columns)\n","\n","    # Convert differenced forecast back to original scale\n","    last_train_values = train_data.iloc[-1]\n","    forecast_original = forecast_df.cumsum() + last_train_values\n","\n","    # Return only the forecast for the target stock\n","    return forecast_original[target_stock]"],"metadata":{"id":"INrDFej8zCw9","executionInfo":{"status":"ok","timestamp":1733553116741,"user_tz":300,"elapsed":181,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["# Function to train VAR and predict for a single stock\n","def var_predict_all_stocks(df, train_start, train_end, test_start, test_end):\n","    \"\"\"\n","    Train a VAR model on all stock data and predict the target stock prices.\n","    \"\"\"\n","    # Split data into training and testing sets\n","    train_data = df[train_start:train_end]\n","    test_data = df[test_start:test_end]\n","\n","    # Ensure stationarity\n","    train_data_stationary = make_stationary(train_data)\n","\n","    # Dynamically calculate maxlags based on dataset size\n","    max_lags = min(15, len(train_data_stationary) // (len(df.columns) + 1))\n","\n","    # Fit the VAR model\n","    model = VAR(train_data_stationary)\n","    results = model.fit(maxlags=max_lags, ic='aic')  # Automatically select lag order\n","\n","    # Forecast differenced values\n","    forecast_diff = results.forecast(train_data_stationary.values[-results.k_ar:], steps=len(test_data))\n","    forecast_df = pd.DataFrame(forecast_diff, index=test_data.index, columns=test_data.columns)\n","\n","    # Convert differenced forecast back to original scale\n","    last_train_values = train_data.iloc[-1]\n","    forecast_original = forecast_df.cumsum() + last_train_values\n","\n","    # Return only the forecast for the target stock\n","    return forecast_original"],"metadata":{"id":"swV00cD42Aae","executionInfo":{"status":"ok","timestamp":1733553638794,"user_tz":300,"elapsed":215,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["min(15, len(train_data_stationary) // (len(filtered_df_orig.columns) + 1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R3k_ncj-2fA7","executionInfo":{"status":"ok","timestamp":1733553692735,"user_tz":300,"elapsed":449,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"d9274e8a-9049-4e80-8165-7e06661c71aa"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["len(filtered_df_orig.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0LHu_B512lCj","executionInfo":{"status":"ok","timestamp":1733553706688,"user_tz":300,"elapsed":558,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"42a2bc05-5749-43d9-82a3-ca1b295968e6"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["162"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["train_start = '2017-01-01'\n","train_end = '2021-12-31'\n","test_start = '2022-01-01'\n","test_end = '2022-12-31'\n","var_predict_all_stocks(filtered_df_orig,train_start, train_end, test_start, test_end )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"7Pi_Cjrv16c8","executionInfo":{"status":"error","timestamp":1733553670022,"user_tz":300,"elapsed":11287,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"4f2a5317-d974-4014-f694-148c56cbc883"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"error","ename":"ValueError","evalue":"maxlags is too large for the number of observations and the number of equations. The largest model cannot be estimated.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-63-43c8479757f1>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtest_start\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'2022-01-01'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mtest_end\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'2022-12-31'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mvar_predict_all_stocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_df_orig\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_start\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_end\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_start\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_end\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-62-cf3e76b97e7c>\u001b[0m in \u001b[0;36mvar_predict_all_stocks\u001b[0;34m(df, train_start, train_end, test_start, test_end)\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0;31m# Fit the VAR model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mVAR\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data_stationary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaxlags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_lags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mic\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'aic'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Automatically select lag order\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0;31m# Forecast differenced values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/vector_ar/var_model.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, maxlags, method, ic, trend, verbose)\u001b[0m\n\u001b[1;32m    656\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    657\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mic\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 658\u001b[0;31m             \u001b[0mselections\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect_order\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaxlags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmaxlags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    659\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mselections\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mic\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    660\u001b[0m                 raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/vector_ar/var_model.py\u001b[0m in \u001b[0;36mselect_order\u001b[0;34m(self, maxlags, trend)\u001b[0m\n\u001b[1;32m    808\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmaxlags\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mmax_estimable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 810\u001b[0;31m                 raise ValueError(\n\u001b[0m\u001b[1;32m    811\u001b[0m                     \u001b[0;34m\"maxlags is too large for the number of observations and \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    812\u001b[0m                     \u001b[0;34m\"the number of equations. The largest model cannot be \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: maxlags is too large for the number of observations and the number of equations. The largest model cannot be estimated."]}]},{"cell_type":"code","source":["# Main function to compute RMSE and MAPE for all stocks\n","def compute_rmse_mape_for_all_stocks(df, train_start, train_end, test_start, test_end):\n","    \"\"\"\n","    Compute RMSE and MAPE for all stocks using VAR and calculate average metrics.\n","    \"\"\"\n","    rmse_list = []\n","    mape_list = []\n","\n","    # Loop through each stock in the dataset\n","    for stock in df.columns:\n","        try:\n","            # Predict stock prices\n","            forecast = var_predict_all_stocks(df, stock, train_start, train_end, test_start, test_end)\n","\n","            # Calculate RMSE and MAPE for the stock\n","            y_true = df.loc[test_start:test_end, stock]\n","            y_pred = forecast\n","\n","            rmse = mean_squared_error(y_true, y_pred, squared=False)\n","            mape = mean_absolute_percentage_error(y_true, y_pred)\n","\n","            # Append metrics to lists\n","            rmse_list.append(rmse)\n","            mape_list.append(mape)\n","\n","            print(f\"{stock} - RMSE: {rmse}, MAPE: {mape}\")\n","        except Exception as e:\n","            print(f\"Error processing stock {stock}: {e}\")\n","            continue\n","\n","    # Calculate average RMSE and MAPE\n","    avg_rmse = np.mean(rmse_list)\n","    avg_mape = np.mean(mape_list)\n","\n","    print(f\"Average RMSE: {avg_rmse}, Average MAPE: {avg_mape}\")\n","\n","    return avg_rmse, avg_mape"],"metadata":{"id":"2goa_B38zMOH","executionInfo":{"status":"ok","timestamp":1733553130252,"user_tz":300,"elapsed":184,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["# Define time ranges\n","train_start = '2017-01-01'\n","train_end = '2021-12-31'\n","test_start = '2022-01-01'\n","test_end = '2022-12-31'\n","\n","\n","# Compute average RMSE and MAPE\n","avg_rmse, avg_mape = compute_rmse_mape_for_all_stocks(filtered_df_orig, train_start, train_end, test_start, test_end)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":425},"id":"aiuGEdShw3am","executionInfo":{"status":"error","timestamp":1733553275902,"user_tz":300,"elapsed":27565,"user":{"displayName":"Ellie Yang","userId":"17207931905370241108"}},"outputId":"5fec53fb-3aba-41a8-a224-c4c759a5960b"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Error processing stock 3IN: maxlags is too large for the number of observations and the number of equations. The largest model cannot be estimated.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n","  self._init_dates(dates, freq)\n"]},{"output_type":"stream","name":"stdout","text":["Error processing stock FOUR: maxlags is too large for the number of observations and the number of equations. The largest model cannot be estimated.\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-60-b24e88939913>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Compute average RMSE and MAPE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mavg_rmse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mavg_mape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_rmse_mape_for_all_stocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_df_orig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_start\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_end\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_start\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_end\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-55-4e9cc39c0744>\u001b[0m in \u001b[0;36mcompute_rmse_mape_for_all_stocks\u001b[0;34m(df, train_start, train_end, test_start, test_end)\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m             \u001b[0;31m# Predict stock prices\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m             \u001b[0mforecast\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvar_predict_all_stocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_start\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_end\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_start\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_end\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m             \u001b[0;31m# Calculate RMSE and MAPE for the stock\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-54-88b3cfe5eea9>\u001b[0m in \u001b[0;36mvar_predict_all_stocks\u001b[0;34m(df, target_stock, train_start, train_end, test_start, test_end)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;31m# Ensure stationarity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mtrain_data_stationary\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_stationary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;31m# Dynamically calculate maxlags based on dataset size\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-53-6c6b82e31e0b>\u001b[0m in \u001b[0;36mmake_stationary\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mstationary_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mcolumn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m         \u001b[0madf_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madfuller\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0madf_result\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0.05\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Apply differencing if not stationary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m             \u001b[0mstationary_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiff\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/stattools.py\u001b[0m in \u001b[0;36madfuller\u001b[0;34m(x, maxlag, regression, autolag, store, regresults)\u001b[0m\n\u001b[1;32m    324\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    325\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mregresults\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 326\u001b[0;31m             icbest, bestlag = _autolag(\n\u001b[0m\u001b[1;32m    327\u001b[0m                 \u001b[0mOLS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxdshort\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfullRHS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstartlag\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxlag\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mautolag\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    328\u001b[0m             )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/stattools.py\u001b[0m in \u001b[0;36m_autolag\u001b[0;34m(mod, endog, exog, startlag, maxlag, method, modargs, fitargs, regresults)\u001b[0m\n\u001b[1;32m    131\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mlag\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstartlag\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstartlag\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mmaxlag\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m         \u001b[0mmod_instance\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mendog\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexog\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0mlag\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmodargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m         \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlag\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmod_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"aic\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/statsmodels/regression/linear_model.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, method, cov_type, cov_kwds, use_t, **kwargs)\u001b[0m\n\u001b[1;32m    331\u001b[0m                     hasattr(self, 'rank')):\n\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 333\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpinv_wexog\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msingular_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpinv_extended\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwexog\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    334\u001b[0m                 self.normalized_cov_params = np.dot(\n\u001b[1;32m    335\u001b[0m                     self.pinv_wexog, np.transpose(self.pinv_wexog))\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/statsmodels/tools/tools.py\u001b[0m in \u001b[0;36mpinv_extended\u001b[0;34m(x, rcond)\u001b[0m\n\u001b[1;32m    262\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    263\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconjugate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 264\u001b[0;31m     \u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msvd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    265\u001b[0m     \u001b[0ms_orig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    266\u001b[0m     \u001b[0mm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/linalg/linalg.py\u001b[0m in \u001b[0;36msvd\u001b[0;34m(a, full_matrices, compute_uv, hermitian)\u001b[0m\n\u001b[1;32m   1679\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1680\u001b[0m         \u001b[0msignature\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'D->DdD'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misComplexType\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m'd->ddd'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1681\u001b[0;31m         \u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgufunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msignature\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mextobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1682\u001b[0m         \u001b[0mu\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult_t\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1683\u001b[0m         \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_realType\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["# Model 3: Train with Cluster data"],"metadata":{"id":"IPa1UbpLPNEb"}}]}